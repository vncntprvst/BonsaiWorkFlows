<?xml version="1.0" encoding="utf-8"?>
<WorkflowBuilder Version="2.4.0-preview">
  <Workflow xmlns:q1="clr-namespace:Bonsai.IO;assembly=Bonsai.System" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:q2="clr-namespace:Bonsai.Scripting;assembly=Bonsai.Scripting" xmlns:q3="clr-namespace:Bonsai.Vision;assembly=Bonsai.Vision" xmlns="https://horizongir.org/bonsai">
    <Nodes>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="Concat" />
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="q1:GetFiles">
          <q1:Path>D:\Data\vIRt32\vIRt32_0424\videos</q1:Path>
          <q1:SearchPattern>*.mp4</q1:SearchPattern>
          <q1:SearchOption>TopDirectoryOnly</q1:SearchOption>
        </Combinator>
      </Expression>
      <Expression xsi:type="SelectMany">
        <Name>FileNames</Name>
        <Workflow>
          <Nodes>
            <Expression xsi:type="WorkflowInput">
              <Name>Source1</Name>
            </Expression>
            <Expression xsi:type="WorkflowOutput" />
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="Concat" />
            </Expression>
          </Nodes>
          <Edges>
            <Edge>
              <From>0</From>
              <To>2</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>2</From>
              <To>1</To>
              <Label>Source1</Label>
            </Edge>
          </Edges>
        </Workflow>
      </Expression>
      <Expression xsi:type="CreateObservable">
        <Name>ProcessVideo</Name>
        <Workflow>
          <Nodes>
            <Expression xsi:type="WorkflowInput">
              <Name>Source1</Name>
            </Expression>
            <Expression xsi:type="ReplaySubject">
              <Name>FileName</Name>
              <BufferSize xsi:nil="true" />
            </Expression>
            <Expression xsi:type="q2:PythonTransform">
              <q2:Script>@returns(str)
def process(value):
  return value.replace('.mp4', '_WhiskersBaseCentroids.csv')</q2:Script>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="q3:FileCapture">
                <q3:FileName>D:\Data\vIRt32\vIRt32_0424\videos\vIRt32_0424_5185_pole.mp4</q3:FileName>
                <q3:PlaybackRate>5000</q3:PlaybackRate>
                <q3:StartPosition>0</q3:StartPosition>
                <q3:PositionUnits>Frames</q3:PositionUnits>
                <q3:Loop>false</q3:Loop>
                <q3:Playing>true</q3:Playing>
              </Combinator>
            </Expression>
            <Expression xsi:type="ExternalizedProperty">
              <MemberName>FileName</MemberName>
              <Name>FileName</Name>
            </Expression>
            <Expression xsi:type="ExternalizedProperty">
              <MemberName>FileName</MemberName>
              <Name>CSVFileName</Name>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="q3:Crop">
                <q3:RegionOfInterest>
                  <q3:X>0</q3:X>
                  <q3:Y>2</q3:Y>
                  <q3:Width>594</q3:Width>
                  <q3:Height>478</q3:Height>
                </q3:RegionOfInterest>
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="q3:SortBinaryRegions" />
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="q3:BinaryRegionAnalysis" />
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="q3:FindContours">
                <q3:Mode>List</q3:Mode>
                <q3:Method>ChainApproxSimple</q3:Method>
                <q3:Offset>
                  <q3:X>0</q3:X>
                  <q3:Y>0</q3:Y>
                </q3:Offset>
                <q3:MinArea>300</q3:MinArea>
                <q3:MaxArea>5000</q3:MaxArea>
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="q3:BackgroundSubtraction">
                <q3:BackgroundFrames>0</q3:BackgroundFrames>
                <q3:AdaptationRate>0</q3:AdaptationRate>
                <q3:ThresholdValue>0</q3:ThresholdValue>
                <q3:ThresholdType>ToZero</q3:ThresholdType>
                <q3:SubtractionMethod>Absolute</q3:SubtractionMethod>
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="q3:MaskPolygon">
                <q3:Regions>
                  <q3:ArrayOfPoint>
                    <q3:Point>
                      <q3:X>-22</q3:X>
                      <q3:Y>515</q3:Y>
                    </q3:Point>
                    <q3:Point>
                      <q3:X>80</q3:X>
                      <q3:Y>487</q3:Y>
                    </q3:Point>
                    <q3:Point>
                      <q3:X>102</q3:X>
                      <q3:Y>282</q3:Y>
                    </q3:Point>
                    <q3:Point>
                      <q3:X>122</q3:X>
                      <q3:Y>252</q3:Y>
                    </q3:Point>
                    <q3:Point>
                      <q3:X>163</q3:X>
                      <q3:Y>214</q3:Y>
                    </q3:Point>
                    <q3:Point>
                      <q3:X>169</q3:X>
                      <q3:Y>150</q3:Y>
                    </q3:Point>
                    <q3:Point>
                      <q3:X>202</q3:X>
                      <q3:Y>103</q3:Y>
                    </q3:Point>
                    <q3:Point>
                      <q3:X>352</q3:X>
                      <q3:Y>33</q3:Y>
                    </q3:Point>
                    <q3:Point>
                      <q3:X>445</q3:X>
                      <q3:Y>71</q3:Y>
                    </q3:Point>
                    <q3:Point>
                      <q3:X>612</q3:X>
                      <q3:Y>137</q3:Y>
                    </q3:Point>
                    <q3:Point>
                      <q3:X>707</q3:X>
                      <q3:Y>27</q3:Y>
                    </q3:Point>
                    <q3:Point>
                      <q3:X>632</q3:X>
                      <q3:Y>-49</q3:Y>
                    </q3:Point>
                    <q3:Point>
                      <q3:X>376</q3:X>
                      <q3:Y>-87</q3:Y>
                    </q3:Point>
                    <q3:Point>
                      <q3:X>-3</q3:X>
                      <q3:Y>-87</q3:Y>
                    </q3:Point>
                  </q3:ArrayOfPoint>
                  <q3:ArrayOfPoint>
                    <q3:Point>
                      <q3:X>597</q3:X>
                      <q3:Y>444</q3:Y>
                    </q3:Point>
                    <q3:Point>
                      <q3:X>85</q3:X>
                      <q3:Y>444</q3:Y>
                    </q3:Point>
                    <q3:Point>
                      <q3:X>83</q3:X>
                      <q3:Y>487</q3:Y>
                    </q3:Point>
                    <q3:Point>
                      <q3:X>618</q3:X>
                      <q3:Y>497</q3:Y>
                    </q3:Point>
                  </q3:ArrayOfPoint>
                  <q3:ArrayOfPoint>
                    <q3:Point>
                      <q3:X>549</q3:X>
                      <q3:Y>444</q3:Y>
                    </q3:Point>
                    <q3:Point>
                      <q3:X>603</q3:X>
                      <q3:Y>442</q3:Y>
                    </q3:Point>
                    <q3:Point>
                      <q3:X>612</q3:X>
                      <q3:Y>139</q3:Y>
                    </q3:Point>
                    <q3:Point>
                      <q3:X>558</q3:X>
                      <q3:Y>115</q3:Y>
                    </q3:Point>
                  </q3:ArrayOfPoint>
                  <q3:ArrayOfPoint>
                    <q3:Point>
                      <q3:X>324</q3:X>
                      <q3:Y>275</q3:Y>
                    </q3:Point>
                    <q3:Point>
                      <q3:X>348</q3:X>
                      <q3:Y>301</q3:Y>
                    </q3:Point>
                    <q3:Point>
                      <q3:X>374</q3:X>
                      <q3:Y>341</q3:Y>
                    </q3:Point>
                    <q3:Point>
                      <q3:X>440</q3:X>
                      <q3:Y>391</q3:Y>
                    </q3:Point>
                    <q3:Point>
                      <q3:X>480</q3:X>
                      <q3:Y>344</q3:Y>
                    </q3:Point>
                    <q3:Point>
                      <q3:X>508</q3:X>
                      <q3:Y>314</q3:Y>
                    </q3:Point>
                    <q3:Point>
                      <q3:X>551</q3:X>
                      <q3:Y>317</q3:Y>
                    </q3:Point>
                    <q3:Point>
                      <q3:X>548</q3:X>
                      <q3:Y>443</q3:Y>
                    </q3:Point>
                    <q3:Point>
                      <q3:X>440</q3:X>
                      <q3:Y>443</q3:Y>
                    </q3:Point>
                    <q3:Point>
                      <q3:X>351</q3:X>
                      <q3:Y>358</q3:Y>
                    </q3:Point>
                    <q3:Point>
                      <q3:X>322</q3:X>
                      <q3:Y>313</q3:Y>
                    </q3:Point>
                    <q3:Point>
                      <q3:X>284</q3:X>
                      <q3:Y>282</q3:Y>
                    </q3:Point>
                    <q3:Point>
                      <q3:X>260</q3:X>
                      <q3:Y>260</q3:Y>
                    </q3:Point>
                    <q3:Point>
                      <q3:X>236</q3:X>
                      <q3:Y>221</q3:Y>
                    </q3:Point>
                    <q3:Point>
                      <q3:X>245</q3:X>
                      <q3:Y>203</q3:Y>
                    </q3:Point>
                    <q3:Point>
                      <q3:X>262</q3:X>
                      <q3:Y>206</q3:Y>
                    </q3:Point>
                    <q3:Point>
                      <q3:X>280</q3:X>
                      <q3:Y>242</q3:Y>
                    </q3:Point>
                  </q3:ArrayOfPoint>
                </q3:Regions>
                <q3:MaskType>ToZeroInv</q3:MaskType>
                <q3:FillValue>
                  <q3:Val0>255</q3:Val0>
                  <q3:Val1>255</q3:Val1>
                  <q3:Val2>255</q3:Val2>
                  <q3:Val3>0</q3:Val3>
                </q3:FillValue>
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="q3:AdaptiveThreshold">
                <q3:MaxValue>255</q3:MaxValue>
                <q3:AdaptiveMethod>MeanC</q3:AdaptiveMethod>
                <q3:ThresholdType>Binary</q3:ThresholdType>
                <q3:BlockSize>87</q3:BlockSize>
                <q3:Parameter>5</q3:Parameter>
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="q3:Grayscale" />
            </Expression>
            <Expression xsi:type="q2:PythonTransform">
              <q2:Script>import clr
clr.AddReference("System.Core")
clr.AddReference("OpenCV.Net")
from System import Tuple
from System.Linq import Enumerable
from OpenCV.Net import Point, Point2f

NaNPoint = Point2f(float.NaN,float.NaN)

@returns(Tuple[Tuple[Point2f,Point2f,Point2f,Point2f,Point2f,Point2f],Tuple[Point2f,Point2f,Point2f,Point2f,Point2f,Point2f]])
def process(sortedRegions):
  # Order component list by decreasing area size
  #largest = list(Enumerable.OrderByDescending(sortedRegions, lambda x:x.Area))
  # Order component list by centroid position
  #hSortRegionList = list(Enumerable.OrderBy(sortedRegions, lambda x:x.Centroid.X))
  vSortRegionList = list(Enumerable.OrderByDescending(sortedRegions, lambda x:x.Centroid.Y))
  if len(vSortRegionList) &gt;=6:
    baseList=Tuple.Create(Point2f(vSortRegionList[0].Contour.ToArray[Point]()[0]),Point2f(vSortRegionList[1].Contour.ToArray[Point]()[0]),Point2f(vSortRegionList[2].Contour.ToArray[Point]()[0]),Point2f(vSortRegionList[3].Contour.ToArray[Point]()[0]),Point2f(vSortRegionList[4].Contour.ToArray[Point]()[0]),Point2f(vSortRegionList[5].Contour.ToArray[Point]()[0]))
    centroidList=Tuple.Create(Point2f(vSortRegionList[0].Centroid.X,vSortRegionList[0].Centroid.Y),Point2f(vSortRegionList[1].Centroid.X,vSortRegionList[1].Centroid.Y),Point2f(vSortRegionList[2].Centroid.X,vSortRegionList[2].Centroid.Y),Point2f(vSortRegionList[3].Centroid.X,vSortRegionList[3].Centroid.Y),Point2f(vSortRegionList[4].Centroid.X,vSortRegionList[4].Centroid.Y),Point2f(vSortRegionList[5].Centroid.X,vSortRegionList[5].Centroid.Y))
  elif len(vSortRegionList) ==5:
    baseList=Tuple.Create(Point2f(vSortRegionList[0].Contour.ToArray[Point]()[0]),Point2f(vSortRegionList[1].Contour.ToArray[Point]()[0]),Point2f(vSortRegionList[2].Contour.ToArray[Point]()[0]),Point2f(vSortRegionList[3].Contour.ToArray[Point]()[0]),Point2f(vSortRegionList[4].Contour.ToArray[Point]()[0]),NaNPoint)
    centroidList=Tuple.Create(Point2f(vSortRegionList[0].Centroid.X,vSortRegionList[0].Centroid.Y),Point2f(vSortRegionList[1].Centroid.X,vSortRegionList[1].Centroid.Y),Point2f(vSortRegionList[2].Centroid.X,vSortRegionList[2].Centroid.Y),Point2f(vSortRegionList[3].Centroid.X,vSortRegionList[3].Centroid.Y),Point2f(vSortRegionList[4].Centroid.X,vSortRegionList[4].Centroid.Y),NaNPoint)
  elif len(vSortRegionList) ==4:
    baseList=Tuple.Create(Point2f(vSortRegionList[0].Contour.ToArray[Point]()[0]),Point2f(vSortRegionList[1].Contour.ToArray[Point]()[0]),Point2f(vSortRegionList[2].Contour.ToArray[Point]()[0]),Point2f(vSortRegionList[3].Contour.ToArray[Point]()[0]),NaNPoint,NaNPoint)
    centroidList=Tuple.Create(Point2f(vSortRegionList[0].Centroid.X,vSortRegionList[0].Centroid.Y),Point2f(vSortRegionList[1].Centroid.X,vSortRegionList[1].Centroid.Y),Point2f(vSortRegionList[2].Centroid.X,vSortRegionList[2].Centroid.Y),Point2f(vSortRegionList[3].Centroid.X,vSortRegionList[3].Centroid.Y),NaNPoint,NaNPoint)
  elif len(vSortRegionList) ==3:
    baseList=Tuple.Create(Point2f(vSortRegionList[0].Contour.ToArray[Point]()[0]),Point2f(vSortRegionList[1].Contour.ToArray[Point]()[0]),Point2f(vSortRegionList[2].Contour.ToArray[Point]()[0]),NaNPoint,NaNPoint,NaNPoint)
    centroidList=Tuple.Create(Point2f(vSortRegionList[0].Centroid.X,vSortRegionList[0].Centroid.Y),Point2f(vSortRegionList[1].Centroid.X,vSortRegionList[1].Centroid.Y),Point2f(vSortRegionList[2].Centroid.X,vSortRegionList[2].Centroid.Y),NaNPoint,NaNPoint,NaNPoint)
  elif len(vSortRegionList) ==2:
    baseList=Tuple.Create(Point2f(vSortRegionList[0].Contour.ToArray[Point]()[0]),Point2f(vSortRegionList[1].Contour.ToArray[Point]()[0]),NaNPoint,NaNPoint,NaNPoint,NaNPoint)
    centroidList=Tuple.Create(Point2f(vSortRegionList[0].Centroid.X,vSortRegionList[0].Centroid.Y),Point2f(vSortRegionList[1].Centroid.X,vSortRegionList[1].Centroid.Y),NaNPoint,NaNPoint,NaNPoint,NaNPoint)
  elif len(vSortRegionList) == 1:
    baseList=Tuple.Create(Point2f(vSortRegionList[0].Contour.ToArray[Point]()[0]),NaNPoint,NaNPoint,NaNPoint,NaNPoint,NaNPoint)
    centroidList=Tuple.Create(Point2f(vSortRegionList[0].Centroid.X,vSortRegionList[0].Centroid.Y),NaNPoint,NaNPoint,NaNPoint,NaNPoint,NaNPoint) 
  else:
    baseList=Tuple.Create(NaNPoint,NaNPoint,NaNPoint,NaNPoint,NaNPoint,NaNPoint)
    centroidList=Tuple.Create(NaNPoint,NaNPoint,NaNPoint,NaNPoint,NaNPoint,NaNPoint)

  return Tuple.Create(baseList, centroidList)
</q2:Script>
            </Expression>
            <Expression xsi:type="q2:ExpressionTransform">
              <q2:Expression>new(
Item1.Item1 as Whisker1_Base,
Item1.Item2 as Whisker2_Base,
Item1.Item3 as Whisker3_Base,
Item1.Item4 as Whisker4_Base,
Item1.Item5 as Whisker5_Base,
Item1.Item6 as Whisker6_Base,
Item2.Item1 as Whisker1_Centroid,
Item2.Item2 as Whisker2_Centroid,
Item2.Item3 as Whisker3_Centroid,
Item2.Item4 as Whisker4_Centroid,
Item2.Item5 as Whisker5_Centroid,
Item2.Item6 as Whisker6_Centroid
)</q2:Expression>
            </Expression>
            <Expression xsi:type="q1:CsvWriter">
              <q1:FileName>D:\Data\vIRt32\vIRt32_0424\videos\vIRt32_0424_5185_pole_WhiskersBaseCentroids.csv</q1:FileName>
              <q1:Delimiter>,</q1:Delimiter>
              <q1:Append>false</q1:Append>
              <q1:Overwrite>true</q1:Overwrite>
              <q1:Suffix>FileCount</q1:Suffix>
              <q1:IncludeHeader>true</q1:IncludeHeader>
              <q1:Selector>Whisker1_Base,Whisker1_Centroid,Whisker2_Base,Whisker2_Centroid,Whisker3_Base,Whisker3_Centroid,Whisker4_Base,Whisker4_Centroid,Whisker5_Base,Whisker5_Centroid,Whisker6_Base,Whisker6_Centroid</q1:Selector>
            </Expression>
            <Expression xsi:type="SubscribeSubject">
              <Name>FileName</Name>
            </Expression>
            <Expression xsi:type="SubscribeSubject">
              <Name>FileName</Name>
            </Expression>
          </Nodes>
          <Edges>
            <Edge>
              <From>0</From>
              <To>1</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>2</From>
              <To>5</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>3</From>
              <To>6</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>4</From>
              <To>3</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>5</From>
              <To>16</To>
              <Label>Source2</Label>
            </Edge>
            <Edge>
              <From>6</From>
              <To>13</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>7</From>
              <To>14</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>8</From>
              <To>7</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>9</From>
              <To>8</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>10</From>
              <To>9</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>11</From>
              <To>10</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>12</From>
              <To>11</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>13</From>
              <To>12</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>14</From>
              <To>15</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>15</From>
              <To>16</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>17</From>
              <To>2</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>18</From>
              <To>4</To>
              <Label>Source1</Label>
            </Edge>
          </Edges>
        </Workflow>
      </Expression>
    </Nodes>
    <Edges>
      <Edge>
        <From>1</From>
        <To>2</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>2</From>
        <To>3</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>3</From>
        <To>0</To>
        <Label>Source1</Label>
      </Edge>
    </Edges>
  </Workflow>
  <ExtensionTypes>
    <Type>Bonsai.Reactive.Concat, Bonsai.Core, Version=2.4.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.IO.GetFiles, Bonsai.System, Version=2.4.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Scripting.PythonTransform, Bonsai.Scripting, Version=2.4.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Vision.FileCapture, Bonsai.Vision, Version=2.4.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Vision.Crop, Bonsai.Vision, Version=2.4.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Vision.SortBinaryRegions, Bonsai.Vision, Version=2.4.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Vision.BinaryRegionAnalysis, Bonsai.Vision, Version=2.4.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Vision.FindContours, Bonsai.Vision, Version=2.4.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Vision.BackgroundSubtraction, Bonsai.Vision, Version=2.4.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Vision.MaskPolygon, Bonsai.Vision, Version=2.4.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Vision.AdaptiveThreshold, Bonsai.Vision, Version=2.4.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Vision.Grayscale, Bonsai.Vision, Version=2.4.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Scripting.ExpressionTransform, Bonsai.Scripting, Version=2.4.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.IO.CsvWriter, Bonsai.System, Version=2.4.0.0, Culture=neutral, PublicKeyToken=null</Type>
  </ExtensionTypes>
</WorkflowBuilder>