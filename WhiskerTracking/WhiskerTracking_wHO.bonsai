<?xml version="1.0" encoding="utf-8"?>
<WorkflowBuilder Version="2.4.0"
                 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                 xmlns:cv="clr-namespace:Bonsai.Vision;assembly=Bonsai.Vision"
                 xmlns:rx="clr-namespace:Bonsai.Reactive;assembly=Bonsai.Core"
                 xmlns:scr="clr-namespace:Bonsai.Scripting;assembly=Bonsai.Scripting"
                 xmlns:sys="clr-namespace:System;assembly=mscorlib"
                 xmlns:io="clr-namespace:Bonsai.IO;assembly=Bonsai.System"
                 xmlns="https://bonsai-rx.org/2018/workflow">
  <Workflow>
    <Nodes>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="cv:FileCapture">
          <cv:FileName>D:\Vincent\vIRt42\vIRt42_1016\vIRt42_1016_5400_10Hz_10ms_10mW_20191016-132936_HSCam.avi</cv:FileName>
          <cv:PlaybackRate>5000</cv:PlaybackRate>
          <cv:StartPosition>0</cv:StartPosition>
          <cv:PositionUnits>Frames</cv:PositionUnits>
          <cv:Loop>true</cv:Loop>
          <cv:Playing>true</cv:Playing>
        </Combinator>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="cv:Crop">
          <cv:RegionOfInterest>
            <cv:X>0</cv:X>
            <cv:Y>2</cv:Y>
            <cv:Width>594</cv:Width>
            <cv:Height>478</cv:Height>
          </cv:RegionOfInterest>
        </Combinator>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="cv:Grayscale" />
      </Expression>
      <Expression xsi:type="Disable">
        <Builder xsi:type="Combinator">
          <Combinator xsi:type="cv:Threshold">
            <cv:ThresholdValue>83</cv:ThresholdValue>
            <cv:MaxValue>255</cv:MaxValue>
            <cv:ThresholdType>BinaryInv</cv:ThresholdType>
          </Combinator>
        </Builder>
      </Expression>
      <Expression xsi:type="Disable">
        <Builder xsi:type="InputMapping">
          <PropertyMappings>
            <Property Name="Size" Selector="Size" />
          </PropertyMappings>
        </Builder>
      </Expression>
      <Expression xsi:type="Disable">
        <Builder xsi:type="Combinator">
          <Combinator xsi:type="cv:SolidColor">
            <cv:Size>
              <cv:Width>594</cv:Width>
              <cv:Height>478</cv:Height>
            </cv:Size>
            <cv:Depth>U8</cv:Depth>
            <cv:Channels>3</cv:Channels>
            <cv:Color>
              <cv:Val0>255</cv:Val0>
              <cv:Val1>255</cv:Val1>
              <cv:Val2>255</cv:Val2>
              <cv:Val3>0</cv:Val3>
            </cv:Color>
          </Combinator>
        </Builder>
      </Expression>
      <Expression xsi:type="Disable">
        <Builder xsi:type="BitwiseNot" />
      </Expression>
      <Expression xsi:type="Disable">
        <Builder xsi:type="Combinator">
          <Combinator xsi:type="rx:Zip" />
        </Builder>
      </Expression>
      <Expression xsi:type="Disable">
        <Builder xsi:type="Combinator">
          <Combinator xsi:type="cv:Mask">
            <cv:FillValue>
              <cv:Val0>0</cv:Val0>
              <cv:Val1>0</cv:Val1>
              <cv:Val2>0</cv:Val2>
              <cv:Val3>0</cv:Val3>
            </cv:FillValue>
          </Combinator>
        </Builder>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="cv:AdaptiveThreshold">
          <cv:MaxValue>255</cv:MaxValue>
          <cv:AdaptiveMethod>MeanC</cv:AdaptiveMethod>
          <cv:ThresholdType>Binary</cv:ThresholdType>
          <cv:BlockSize>87</cv:BlockSize>
          <cv:Parameter>3</cv:Parameter>
        </Combinator>
      </Expression>
      <Expression xsi:type="IncludeWorkflow" Path="Extensions\HeadMask.bonsai" />
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="rx:Zip" />
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="cv:Mask">
          <cv:FillValue>
            <cv:Val0>255</cv:Val0>
            <cv:Val1>0</cv:Val1>
            <cv:Val2>0</cv:Val2>
            <cv:Val3>0</cv:Val3>
          </cv:FillValue>
        </Combinator>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="cv:MaskPolygon">
          <cv:Regions>
            <cv:ArrayOfPoint>
              <cv:Point>
                <cv:X>458</cv:X>
                <cv:Y>101</cv:Y>
              </cv:Point>
              <cv:Point>
                <cv:X>449</cv:X>
                <cv:Y>388</cv:Y>
              </cv:Point>
              <cv:Point>
                <cv:X>200</cv:X>
                <cv:Y>454</cv:Y>
              </cv:Point>
              <cv:Point>
                <cv:X>76</cv:X>
                <cv:Y>87</cv:Y>
              </cv:Point>
              <cv:Point>
                <cv:X>176</cv:X>
                <cv:Y>7</cv:Y>
              </cv:Point>
            </cv:ArrayOfPoint>
          </cv:Regions>
          <cv:MaskType>ToZero</cv:MaskType>
          <cv:FillValue>
            <cv:Val0>255</cv:Val0>
            <cv:Val1>255</cv:Val1>
            <cv:Val2>255</cv:Val2>
            <cv:Val3>0</cv:Val3>
          </cv:FillValue>
        </Combinator>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="cv:BackgroundSubtraction">
          <cv:BackgroundFrames>0</cv:BackgroundFrames>
          <cv:AdaptationRate>0</cv:AdaptationRate>
          <cv:ThresholdValue>0</cv:ThresholdValue>
          <cv:ThresholdType>ToZero</cv:ThresholdType>
          <cv:SubtractionMethod>Absolute</cv:SubtractionMethod>
        </Combinator>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="cv:FindContours">
          <cv:Mode>List</cv:Mode>
          <cv:Method>ChainApproxNone</cv:Method>
          <cv:Offset>
            <cv:X>0</cv:X>
            <cv:Y>0</cv:Y>
          </cv:Offset>
          <cv:MinArea>500</cv:MinArea>
          <cv:MaxArea>3000</cv:MaxArea>
        </Combinator>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="cv:BinaryRegionAnalysis" />
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="cv:SortBinaryRegions" />
      </Expression>
      <Expression xsi:type="scr:PythonTransform">
        <scr:Script>import clr
clr.AddReference("System.Core")
clr.AddReference("OpenCV.Net")
clr.AddReference("Bonsai.Vision")
from System import Tuple, Math, Single, Array
import math
from System.Linq import Enumerable
from OpenCV.Net import Point, Point2f
from Bonsai.Vision import ConnectedComponentCollection

base = None
NaNPoint = Point2f(float.NaN,float.NaN)
centroidLoc = NaNPoint
centroidVel = NaNPoint
distThd = 20

def FindBasePoint(inputPointArray):
  pointList = Enumerable.OrderBy(inputPointArray, lambda x:x.X)
  firstPoint = Enumerable.First(pointList)
  return firstPoint

def VDistFromLastFrame(pt1,pt2):
  #dx = (pt2.X - pt1.X)
  dy = (pt2.Y - pt1.Y)
  return dy

@returns(ConnectedComponentCollection) #(Tuple[float,float]) #ConnectedComponentCollection) #@returns(Tuple[float,int]) #@returns(Single)
def process(sortedRegions):
  global base, centroidLoc, centroidVel
  # Order blob list by descending area
  #leftmost = list(Enumerable.OrderBy(sortedRegions, lambda x:x.Centroid.X))
  #vSortRegionList = list(Enumerable.OrderBy(sortedRegions, lambda x:x.Orientation))
  vSortRegionList = list(Enumerable.OrderByDescending(sortedRegions, lambda x:FindBasePoint(x.Contour.ToArray[Point]()).Y))

  if len(vSortRegionList) &gt;= 1:
    blob1Index = 0
    currbase = base
    newbase = FindBasePoint(vSortRegionList[blob1Index].Contour.ToArray[Point]()) #vSortRegionList[blob1Index].Contour.ToArray[Point]()[0]
    if base is None:
      base = newbase
      #return float.NaN
    elif abs(VDistFromLastFrame(currbase, newbase)) &lt; distThd:
      base = newbase
      #float(largest[0].Orientation)
      #return distfromlastframe(currbase, base)  
    else: # find which blob is which instead
      if len(vSortRegionList) &gt;= blob1Index+2:
        nextbase = FindBasePoint(vSortRegionList[blob1Index+1].Contour.ToArray[Point]())
        if abs(VDistFromLastFrame(currbase, nextbase)) &lt; distThd:
          blob1Index = blob1Index+1
          base = nextbase
        else:
          if len(vSortRegionList) &gt;= blob1Index+3:
            nextbase = FindBasePoint(vSortRegionList[blob1Index+2].Contour.ToArray[Point]())
            if abs(VDistFromLastFrame(currbase, nextbase)) &lt; distThd:
              blob1Index = blob1Index+2
              base = nextbase
            else: #keep previous value
              blob1Index = float.NaN
              base = base
          else:
            blob1Index = float.NaN
      else:
        blob1Index = float.NaN
      #return distfromlastframe(currbase, base)  
    blob1Index = float(blob1Index)
  else:
    # otherwise, return nan
    base = None
    blob1Index = float.NaN

  #return Tuple.Create(blob1Index,len(leftmost))

  Component = ConnectedComponentCollection(sortedRegions.ImageSize)
  # Order component list by vSortRegionList centroid
  #leftmost = list(Enumerable.OrderBy(sortedRegions, lambda x:x.Centroid.X))
  #vSortRegionList = list(Enumerable.OrderBy(sortedRegions, lambda x:x.Orientation))
  vSortRegionList = list(Enumerable.OrderByDescending(sortedRegions, lambda x:FindBasePoint(x.Contour.ToArray[Point]()).Y))
  if Single.IsNaN(blob1Index) == False:
    Component.Add(vSortRegionList[int(blob1Index)])
    if int(blob1Index)+1 &lt;= len(vSortRegionList)-1:
      Component.Add(vSortRegionList[int(blob1Index)+1])
    if int(blob1Index)+2 &lt;= len(vSortRegionList)-1:
      Component.Add(vSortRegionList[int(blob1Index)+2])
    
  return Component</scr:Script>
      </Expression>
      <Expression xsi:type="scr:PythonTransform">
        <scr:Script>#return x,y values for base, center, tip of three central whiskers
import clr
clr.AddReference("System.Core")
clr.AddReference("OpenCV.Net")
from System import Tuple
from System.Linq import Enumerable
from OpenCV.Net import Point, Point2f

NaNPoint = Point2f(float.NaN,float.NaN)

def FindBasePoint(inputPointArray):
  pointList = Enumerable.OrderBy(inputPointArray, lambda x:x.X)
  firstPoint = Enumerable.First(pointList)
  return firstPoint

def FindTipPoint(inputPointArray):
  pointList = Enumerable.OrderByDescending(inputPointArray, lambda x:x.X)
  lastPoint = Enumerable.First(pointList)
  return lastPoint

@returns(Tuple[Tuple[Point2f,Point2f,Point2f],Tuple[Point2f,Point2f,Point2f],Tuple[Point2f,Point2f,Point2f]])
def process(sortedRegions):
  #vSortRegionList = list(Enumerable.OrderByDescending(sortedRegions, lambda x:x.Orientation))
  vSortRegionList = list(Enumerable.OrderByDescending(sortedRegions, lambda x:FindBasePoint(x.Contour.ToArray[Point]()).Y))
  if len(vSortRegionList) &gt;=3:
    baseList=Tuple.Create(Point2f(FindBasePoint(vSortRegionList[0].Contour.ToArray[Point]())),Point2f(FindBasePoint(vSortRegionList[1].Contour.ToArray[Point]())),Point2f(FindBasePoint(vSortRegionList[2].Contour.ToArray[Point]())))
    centroidList=Tuple.Create(Point2f(vSortRegionList[0].Centroid.X,vSortRegionList[0].Centroid.Y),Point2f(vSortRegionList[1].Centroid.X,vSortRegionList[1].Centroid.Y),Point2f(vSortRegionList[2].Centroid.X,vSortRegionList[2].Centroid.Y))
    tipList=Tuple.Create(Point2f(FindTipPoint(vSortRegionList[0].Contour.ToArray[Point]())),Point2f(FindTipPoint(vSortRegionList[1].Contour.ToArray[Point]())),Point2f(FindTipPoint(vSortRegionList[2].Contour.ToArray[Point]())))
  elif len(vSortRegionList) ==2:
    baseList=Tuple.Create(Point2f(FindBasePoint(vSortRegionList[0].Contour.ToArray[Point]())),Point2f(FindBasePoint(vSortRegionList[1].Contour.ToArray[Point]())),NaNPoint)
    centroidList=Tuple.Create(Point2f(vSortRegionList[0].Centroid.X,vSortRegionList[0].Centroid.Y),Point2f(vSortRegionList[1].Centroid.X,vSortRegionList[1].Centroid.Y),NaNPoint)
    tipList=Tuple.Create(Point2f(FindTipPoint(vSortRegionList[0].Contour.ToArray[Point]())),Point2f(FindTipPoint(vSortRegionList[1].Contour.ToArray[Point]())),NaNPoint)
  elif len(vSortRegionList) == 1:
    baseList=Tuple.Create(Point2f(FindBasePoint(vSortRegionList[0].Contour.ToArray[Point]())),NaNPoint,NaNPoint)
    centroidList=Tuple.Create(Point2f(vSortRegionList[0].Centroid.X,vSortRegionList[0].Centroid.Y),NaNPoint,NaNPoint) 
    tipList=Tuple.Create(Point2f(FindTipPoint(vSortRegionList[0].Contour.ToArray[Point]())),NaNPoint,NaNPoint)
  else:
    baseList=Tuple.Create(NaNPoint,NaNPoint,NaNPoint)
    centroidList=Tuple.Create(NaNPoint,NaNPoint,NaNPoint)
    tipList=Tuple.Create(NaNPoint,NaNPoint,NaNPoint)

  return Tuple.Create(baseList, centroidList, tipList)
</scr:Script>
      </Expression>
      <Expression xsi:type="scr:ExpressionTransform">
        <scr:Expression>new(
Item1.Item1 as Whisker1_Base,
Item1.Item2 as Whisker2_Base,
Item1.Item3 as Whisker3_Base,
Item2.Item1 as Whisker1_Centroid,
Item2.Item2 as Whisker2_Centroid,
Item2.Item3 as Whisker3_Centroid,
Item3.Item1 as Whisker1_Tip,
Item3.Item2 as Whisker2_Tip,
Item3.Item3 as Whisker3_Tip
)</scr:Expression>
      </Expression>
      <Expression xsi:type="PropertySource" TypeArguments="cv:FileCapture,sys:String">
        <MemberName>FileName</MemberName>
        <Value>D:\Vincent\vIRt41\vIRt41_0815\vIRt41_0815_5100_10Hz_10ms_20mW_20190815-174017_HSCam.avi</Value>
      </Expression>
      <Expression xsi:type="scr:PythonTransform">
        <scr:Script>@returns(str)
def process(value):
  return value.replace('.avi', '_WhiskersBaseCentroidTip.csv')</scr:Script>
      </Expression>
      <Expression xsi:type="PropertyMapping">
        <PropertyMappings>
          <Property Name="FileName" />
        </PropertyMappings>
      </Expression>
      <Expression xsi:type="Disable">
        <Builder xsi:type="io:CsvWriter">
          <io:FileName>D:\Vincent\vIRt41\vIRt41_0815\vIRt41_0815_5100_10Hz_10ms_20mW_20190815-174017_HSCam_WhiskersBaseCentroidTip.csv</io:FileName>
          <io:Delimiter>,</io:Delimiter>
          <io:Append>false</io:Append>
          <io:Overwrite>true</io:Overwrite>
          <io:Suffix>None</io:Suffix>
          <io:IncludeHeader>true</io:IncludeHeader>
          <io:Selector>Whisker1_Base,Whisker1_Centroid,Whisker1_Tip,Whisker2_Base,Whisker2_Centroid,Whisker2_Tip,Whisker3_Base,Whisker3_Centroid,Whisker3_Tip</io:Selector>
        </Builder>
      </Expression>
    </Nodes>
    <Edges>
      <Edge From="0" To="1" Label="Source1" />
      <Edge From="1" To="2" Label="Source1" />
      <Edge From="2" To="3" Label="Source1" />
      <Edge From="2" To="9" Label="Source1" />
      <Edge From="2" To="10" Label="Source1" />
      <Edge From="3" To="4" Label="Source1" />
      <Edge From="3" To="6" Label="Source1" />
      <Edge From="4" To="5" Label="Source1" />
      <Edge From="5" To="7" Label="Source1" />
      <Edge From="6" To="7" Label="Source2" />
      <Edge From="7" To="8" Label="Source1" />
      <Edge From="9" To="11" Label="Source1" />
      <Edge From="10" To="11" Label="Source2" />
      <Edge From="11" To="12" Label="Source1" />
      <Edge From="12" To="13" Label="Source1" />
      <Edge From="13" To="14" Label="Source1" />
      <Edge From="14" To="15" Label="Source1" />
      <Edge From="15" To="16" Label="Source1" />
      <Edge From="16" To="17" Label="Source1" />
      <Edge From="17" To="18" Label="Source1" />
      <Edge From="18" To="19" Label="Source1" />
      <Edge From="19" To="20" Label="Source1" />
      <Edge From="20" To="24" Label="Source1" />
      <Edge From="21" To="22" Label="Source1" />
      <Edge From="22" To="23" Label="Source1" />
      <Edge From="23" To="24" Label="Source2" />
    </Edges>
  </Workflow>
</WorkflowBuilder>