<?xml version="1.0" encoding="utf-8"?>
<WorkflowBuilder Version="2.4.0"
                 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                 xmlns:cv="clr-namespace:Bonsai.Vision;assembly=Bonsai.Vision"
                 xmlns:rx="clr-namespace:Bonsai.Reactive;assembly=Bonsai.Core"
                 xmlns:scr="clr-namespace:Bonsai.Scripting;assembly=Bonsai.Scripting"
                 xmlns:sys="clr-namespace:System;assembly=mscorlib"
                 xmlns:io="clr-namespace:Bonsai.IO;assembly=Bonsai.System"
                 xmlns="https://bonsai-rx.org/2018/workflow">
  <Workflow>
    <Nodes>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="cv:FileCapture">
          <cv:FileName>D:\Vincent\vIRt43\vIRt43_1204\vIRt43_1204_4400_20191204-171925_HSCam.avi</cv:FileName>
          <cv:PlaybackRate>500</cv:PlaybackRate>
          <cv:StartPosition>1</cv:StartPosition>
          <cv:PositionUnits>Frames</cv:PositionUnits>
          <cv:Loop>false</cv:Loop>
          <cv:Playing>true</cv:Playing>
        </Combinator>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="cv:Crop">
          <cv:RegionOfInterest>
            <cv:X>0</cv:X>
            <cv:Y>2</cv:Y>
            <cv:Width>594</cv:Width>
            <cv:Height>478</cv:Height>
          </cv:RegionOfInterest>
        </Combinator>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="cv:Grayscale" />
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="cv:AdaptiveThreshold">
          <cv:MaxValue>255</cv:MaxValue>
          <cv:AdaptiveMethod>MeanC</cv:AdaptiveMethod>
          <cv:ThresholdType>Binary</cv:ThresholdType>
          <cv:BlockSize>33</cv:BlockSize>
          <cv:Parameter>5</cv:Parameter>
        </Combinator>
      </Expression>
      <Expression xsi:type="IncludeWorkflow" Path="Extensions\HeadMask.bonsai" />
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="rx:Zip" />
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="cv:Mask">
          <cv:FillValue>
            <cv:Val0>255</cv:Val0>
            <cv:Val1>0</cv:Val1>
            <cv:Val2>0</cv:Val2>
            <cv:Val3>0</cv:Val3>
          </cv:FillValue>
        </Combinator>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="cv:MaskPolygon">
          <cv:Regions>
            <cv:ArrayOfPoint>
              <cv:Point>
                <cv:X>593</cv:X>
                <cv:Y>0</cv:Y>
              </cv:Point>
              <cv:Point>
                <cv:X>593</cv:X>
                <cv:Y>424</cv:Y>
              </cv:Point>
              <cv:Point>
                <cv:X>90</cv:X>
                <cv:Y>460</cv:Y>
              </cv:Point>
              <cv:Point>
                <cv:X>0</cv:X>
                <cv:Y>0</cv:Y>
              </cv:Point>
              <cv:Point>
                <cv:X>183</cv:X>
                <cv:Y>0</cv:Y>
              </cv:Point>
            </cv:ArrayOfPoint>
          </cv:Regions>
          <cv:MaskType>ToZero</cv:MaskType>
          <cv:FillValue>
            <cv:Val0>255</cv:Val0>
            <cv:Val1>255</cv:Val1>
            <cv:Val2>255</cv:Val2>
            <cv:Val3>0</cv:Val3>
          </cv:FillValue>
        </Combinator>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="cv:BackgroundSubtraction">
          <cv:BackgroundFrames>0</cv:BackgroundFrames>
          <cv:AdaptationRate>0</cv:AdaptationRate>
          <cv:ThresholdValue>0</cv:ThresholdValue>
          <cv:ThresholdType>ToZero</cv:ThresholdType>
          <cv:SubtractionMethod>Absolute</cv:SubtractionMethod>
        </Combinator>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="cv:FindContours">
          <cv:Mode>List</cv:Mode>
          <cv:Method>ChainApproxNone</cv:Method>
          <cv:Offset>
            <cv:X>0</cv:X>
            <cv:Y>0</cv:Y>
          </cv:Offset>
          <cv:MinArea>500</cv:MinArea>
          <cv:MaxArea>2000</cv:MaxArea>
        </Combinator>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="cv:BinaryRegionAnalysis" />
      </Expression>
      <Expression xsi:type="Disable">
        <Builder xsi:type="IncludeWorkflow" Path="Extensions\TrackWhisker_Multiple_HorizontalHeadPosition.bonsai" />
      </Expression>
      <Expression xsi:type="scr:PythonTransform">
        <scr:Script>#return x,y values for base, center, tip of three central whiskers
import clr
clr.AddReference("System.Core")
clr.AddReference("OpenCV.Net")
from System import Tuple
from System.Linq import Enumerable
from OpenCV.Net import Point, Point2f

NaNPoint = Point2f(float.NaN,float.NaN)

def FindBasePoint(inputPointArray):
  pointList = Enumerable.OrderBy(inputPointArray, lambda x:x.Y)
  firstPoint = Enumerable.First(pointList)
  return firstPoint

def FindTipPoint(inputPointArray):
  pointList = Enumerable.OrderByDescending(inputPointArray, lambda x:x.Y)
  lastPoint = Enumerable.First(pointList)
  return lastPoint

@returns(Tuple[Tuple[Point2f,Point2f,Point2f],Tuple[Point2f,Point2f,Point2f],Tuple[Point2f,Point2f,Point2f]])
def process(sortedRegions):
  vSortRegionList = list(Enumerable.OrderByDescending(sortedRegions, lambda x:FindBasePoint(x.Contour.ToArray[Point]()).X))
  if len(vSortRegionList) &gt;=3:
    baseList=Tuple.Create(Point2f(FindBasePoint(vSortRegionList[0].Contour.ToArray[Point]())),Point2f(FindBasePoint(vSortRegionList[1].Contour.ToArray[Point]())),Point2f(FindBasePoint(vSortRegionList[2].Contour.ToArray[Point]())))
    centroidList=Tuple.Create(Point2f(vSortRegionList[0].Centroid.X,vSortRegionList[0].Centroid.Y),Point2f(vSortRegionList[1].Centroid.X,vSortRegionList[1].Centroid.Y),Point2f(vSortRegionList[2].Centroid.X,vSortRegionList[2].Centroid.Y))
    tipList=Tuple.Create(Point2f(FindTipPoint(vSortRegionList[0].Contour.ToArray[Point]())),Point2f(FindTipPoint(vSortRegionList[1].Contour.ToArray[Point]())),Point2f(FindTipPoint(vSortRegionList[2].Contour.ToArray[Point]())))
  elif len(vSortRegionList) ==2:
    baseList=Tuple.Create(Point2f(FindBasePoint(vSortRegionList[0].Contour.ToArray[Point]())),Point2f(FindBasePoint(vSortRegionList[1].Contour.ToArray[Point]())),NaNPoint)
    centroidList=Tuple.Create(Point2f(vSortRegionList[0].Centroid.X,vSortRegionList[0].Centroid.Y),Point2f(vSortRegionList[1].Centroid.X,vSortRegionList[1].Centroid.Y),NaNPoint)
    tipList=Tuple.Create(Point2f(FindTipPoint(vSortRegionList[0].Contour.ToArray[Point]())),Point2f(FindTipPoint(vSortRegionList[1].Contour.ToArray[Point]())),NaNPoint)
  elif len(vSortRegionList) == 1:
    baseList=Tuple.Create(Point2f(FindBasePoint(vSortRegionList[0].Contour.ToArray[Point]())),NaNPoint,NaNPoint)
    centroidList=Tuple.Create(Point2f(vSortRegionList[0].Centroid.X,vSortRegionList[0].Centroid.Y),NaNPoint,NaNPoint) 
    tipList=Tuple.Create(Point2f(FindTipPoint(vSortRegionList[0].Contour.ToArray[Point]())),NaNPoint,NaNPoint)
  else:
    baseList=Tuple.Create(NaNPoint,NaNPoint,NaNPoint)
    centroidList=Tuple.Create(NaNPoint,NaNPoint,NaNPoint)
    tipList=Tuple.Create(NaNPoint,NaNPoint,NaNPoint)

  return Tuple.Create(baseList, centroidList, tipList)
</scr:Script>
      </Expression>
      <Expression xsi:type="scr:ExpressionTransform">
        <scr:Expression>new(
Item1.Item1 as Whisker1_Base,
Item1.Item2 as Whisker2_Base,
Item1.Item3 as Whisker3_Base,
Item2.Item1 as Whisker1_Centroid,
Item2.Item2 as Whisker2_Centroid,
Item2.Item3 as Whisker3_Centroid,
Item3.Item1 as Whisker1_Tip,
Item3.Item2 as Whisker2_Tip,
Item3.Item3 as Whisker3_Tip
)</scr:Expression>
      </Expression>
      <Expression xsi:type="Disable">
        <Builder xsi:type="PropertySource" TypeArguments="cv:FileCapture,sys:String">
          <MemberName>FileName</MemberName>
          <Value>D:\Vincent\vIRt43\vIRt43_1119\vIRt43_1119_wheeltraining_20191119-175457_HSCam.avi</Value>
        </Builder>
      </Expression>
      <Expression xsi:type="Disable">
        <Builder xsi:type="scr:PythonTransform">
          <scr:Script>@returns(str)
def process(value):
  return value.replace('.avi', '_WhiskersBaseCentroidTip.csv')</scr:Script>
        </Builder>
      </Expression>
      <Expression xsi:type="Disable">
        <Builder xsi:type="PropertyMapping">
          <PropertyMappings>
            <Property Name="FileName" Selector="it" />
          </PropertyMappings>
        </Builder>
      </Expression>
      <Expression xsi:type="Disable">
        <Builder xsi:type="io:CsvWriter">
          <io:FileName>D:\Vincent\vIRt43\vIRt43_1119\vIRt43_1119_wheeltraining_20191119-175457_HSCam_WhiskersBaseCentroidTip.csv</io:FileName>
          <io:Delimiter>,</io:Delimiter>
          <io:Append>false</io:Append>
          <io:Overwrite>true</io:Overwrite>
          <io:Suffix>None</io:Suffix>
          <io:IncludeHeader>true</io:IncludeHeader>
          <io:Selector>Whisker1_Base,Whisker1_Centroid,Whisker1_Tip,Whisker2_Base,Whisker2_Centroid,Whisker2_Tip,Whisker3_Base,Whisker3_Centroid,Whisker3_Tip</io:Selector>
        </Builder>
      </Expression>
      <Expression xsi:type="Disable">
        <Builder xsi:type="Combinator">
          <Combinator xsi:type="rx:Zip" />
        </Builder>
      </Expression>
      <Expression xsi:type="Disable">
        <Builder xsi:type="scr:PythonTransform">
          <scr:Name>DrawMarkers</scr:Name>
          <scr:Description>Draws whiskers' base, centroid and tip on video

</scr:Description>
          <scr:Script>import clr
#clr.AddReference("System.Core")
clr.AddReference("OpenCV.Net")
#from System import Tuple
#from System.Linq import Enumerable
from OpenCV.Net import *

@returns(IplImage)
def process(value):
  image = value.Item2
  markerCoordinates = value.Item1
  #vSortMarkersList = list(Enumerable.OrderByDescending(markerCoordinates, lambda x:x.Item1.X))
  output = image.Clone()
  if markerCoordinates is not None:
    #print(type(markerCoordinates))
  #    if len(markerCoordinates.Item1) &gt;=1:
    CV.Circle(output, Point(markerCoordinates.Item1.Item1), 10, Scalar.Rgb(255, 0, 0), -1)
    CV.Circle(output, Point(markerCoordinates.Item2.Item1), 10, Scalar.Rgb(255,99,71), -1) 
    CV.Circle(output, Point(markerCoordinates.Item3.Item1), 10, Scalar.Rgb(255,127,80), -1)

    CV.Circle(output, Point(markerCoordinates.Item1.Item2), 10, Scalar.Rgb(0, 255, 0), -1)
    CV.Circle(output, Point(markerCoordinates.Item2.Item2), 10, Scalar.Rgb(99, 255,71), -1) 
    CV.Circle(output, Point(markerCoordinates.Item3.Item2), 10, Scalar.Rgb(127, 255,80), -1)

    CV.Circle(output, Point(markerCoordinates.Item1.Item3), 10, Scalar.Rgb(0, 0, 255), -1)
    CV.Circle(output, Point(markerCoordinates.Item2.Item3), 10, Scalar.Rgb(99,71, 255), -1) 
    CV.Circle(output, Point(markerCoordinates.Item3.Item3), 10, Scalar.Rgb(127,80, 255), -1)

  return output</scr:Script>
        </Builder>
      </Expression>
    </Nodes>
    <Edges>
      <Edge From="0" To="1" Label="Source1" />
      <Edge From="1" To="2" Label="Source1" />
      <Edge From="2" To="3" Label="Source1" />
      <Edge From="2" To="4" Label="Source1" />
      <Edge From="3" To="5" Label="Source1" />
      <Edge From="4" To="5" Label="Source2" />
      <Edge From="5" To="6" Label="Source1" />
      <Edge From="6" To="7" Label="Source1" />
      <Edge From="7" To="8" Label="Source1" />
      <Edge From="8" To="9" Label="Source1" />
      <Edge From="9" To="10" Label="Source1" />
      <Edge From="10" To="11" Label="Source1" />
      <Edge From="11" To="12" Label="Source1" />
      <Edge From="12" To="13" Label="Source1" />
      <Edge From="13" To="17" Label="Source1" />
      <Edge From="14" To="15" Label="Source1" />
      <Edge From="15" To="16" Label="Source1" />
      <Edge From="16" To="17" Label="Source2" />
      <Edge From="18" To="19" Label="Source1" />
    </Edges>
  </Workflow>
</WorkflowBuilder>