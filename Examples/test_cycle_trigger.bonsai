<?xml version="1.0" encoding="utf-8"?>
<WorkflowBuilder Version="2.4.0-preview">
  <Workflow xmlns:q1="clr-namespace:Bonsai.Vision;assembly=Bonsai.Vision" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:q2="clr-namespace:Bonsai.Scripting;assembly=Bonsai.Scripting" xmlns:q3="clr-namespace:Bonsai.Dsp;assembly=Bonsai.Dsp" xmlns="https://horizongir.org/bonsai">
    <Nodes>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="q1:FileCapture">
          <q1:FileName>E:\Data\raw\OpenEphys\vIRt23\vIRt23_1117\vIRt23_4400_10ms10Hz10mW.mp4</q1:FileName>
          <q1:PlaybackRate>0</q1:PlaybackRate>
          <q1:StartPosition>0</q1:StartPosition>
          <q1:PositionUnits>Frames</q1:PositionUnits>
          <q1:Loop>false</q1:Loop>
          <q1:Playing>true</q1:Playing>
        </Combinator>
      </Expression>
      <Expression xsi:type="q2:PythonTransform">
        <q2:Name>OnCycleTrigger</q2:Name>
        <q2:Script>cycleOn = False

@returns(bool)
def process(value):
  global cycleOn

  if value.Item1&gt;2 and value.Item2&gt;2:
    onCycleTrig = True
    offCycleTrig = False
  elif value.Item1&lt;-2 and value.Item2&gt;2:
    onCycleTrig = False
    offCycleTrig = True
  else:
    onCycleTrig = False
    offCycleTrig = False

  if cycleOn == True:
    if offCycleTrig == False:
      cycleOn = True
      return False
    else:
      cycleOn = False
      return False
    
  if cycleOn == False:
    if onCycleTrig == True:
      cycleOn = True
      return True
    else:
      cycleOn = False
      return False</q2:Script>
      </Expression>
      <Expression xsi:type="q2:PythonTransform">
        <q2:Name>OffCycleTrigger</q2:Name>
        <q2:Script>cycleOn = False

@returns(bool)
def process(value):
  global cycleOn

  if value.Item1&lt;-2 and value.Item2&gt;2:
    onCycleTrig = True
    offCycleTrig = False
  elif value.Item1&gt;2 and value.Item2&gt;2:
    onCycleTrig = False
    offCycleTrig = True
  else:
    onCycleTrig = False
    offCycleTrig = False

  if cycleOn == True:
    if offCycleTrig == False:
      cycleOn = True
      return False
    else:
      cycleOn = False
      return False
    
  if cycleOn == False:
    if onCycleTrig == True:
      cycleOn = True
      return True
    else:
      cycleOn = False
      return False</q2:Script>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="TriggeredWindow">
          <Count>1</Count>
        </Combinator>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="q3:Delay">
          <q3:Count>30</q3:Count>
        </Combinator>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="q3:FunctionGenerator">
          <q3:BufferLength>60</q3:BufferLength>
          <q3:Frequency>30</q3:Frequency>
          <q3:Waveform>Sine</q3:Waveform>
          <q3:PlaybackRate>500</q3:PlaybackRate>
        </Combinator>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="TriggeredWindow">
          <Count>1</Count>
        </Combinator>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="q3:Delay">
          <q3:Count>10</q3:Count>
        </Combinator>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="q3:FunctionGenerator">
          <q3:BufferLength>60</q3:BufferLength>
          <q3:Frequency>30</q3:Frequency>
          <q3:Waveform>Sine</q3:Waveform>
          <q3:PlaybackRate>500</q3:PlaybackRate>
        </Combinator>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="q3:Buffer">
          <q3:Count>120</q3:Count>
          <q3:Skip xsi:nil="true" />
        </Combinator>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="q3:Concat">
          <q3:Axis>0</q3:Axis>
        </Combinator>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="TriggeredBuffer">
          <Count>1</Count>
        </Combinator>
      </Expression>
      <Expression xsi:type="NestedWorkflow">
        <Name>WhiskerTracking</Name>
        <Workflow>
          <Nodes>
            <Expression xsi:type="q2:PythonTransform">
              <q2:Script>import clr
clr.AddReference("System.Core")
clr.AddReference("OpenCV.Net")
clr.AddReference("Bonsai.Vision")
from System import Tuple, Math, Single, Array
import math
from System.Linq import Enumerable
from OpenCV.Net import Point, Point2f
from Bonsai.Vision import ConnectedComponentCollection

base = None
nanpoint = Point2f(float.NaN,float.NaN)
centroidLoc = nanpoint
centroidVel = nanpoint

def distfromlastframe(pt1,pt2):
  dx = (pt2.X - pt1.X)
  dy = (pt2.Y - pt1.Y)
  return dx + dy

def pointvelocity(pt1,pt2):
  dx = (pt2.X - pt1.X)
  dy = (pt2.Y - pt1.Y)
  return Point(dx,dy)

def bisector(pt1,pt2):
  dx = abs(pt2.X - pt1.X)
  dy = abs(pt2.Y - pt1.Y)
  if dx+dy !=0:
    #if abs(pt2.X) + abs(pt2.Y) &lt; 20:
    #  return 0
    #el
    if  pt2.X &lt;= 0:
      return (dx*dy)/math.hypot(dx, dy) #flipping polarity, as head oriented leftward
    else:
      return -(dx*dy)/math.hypot(dx, dy)
  else:
    return 0

@returns(Tuple[float,float]) #ConnectedComponentCollection) #@returns(Tuple[float,int]) #@returns(Single)
def process(sortedRegions):
  global base, centroidLoc, centroidVel
  # Order blob list by descending area
  #largest = list(Enumerable.OrderByDescending(sortedRegions, lambda x:x.Area))
  # Order component list by rightmost centroid
  rightmost = list(Enumerable.OrderByDescending(sortedRegions, lambda x:x.Centroid.X))

  if len(rightmost) &gt;= 1:
    blob1Index = 0
    currbase = base
    newbase = rightmost[blob1Index].Contour.ToArray[Point]()[0]
    if base is None:
      base = newbase
      #return float.NaN
    elif abs(distfromlastframe(currbase, newbase)) &lt; 20:
      base = newbase
      #float(largest[0].Orientation)
      #return distfromlastframe(currbase, base)  
    else: # find which blob is which instead
      if len(rightmost) &gt;= blob1Index+2:
        nextbase = rightmost[blob1Index+1].Contour.ToArray[Point]()[0]
        if abs(distfromlastframe(currbase, nextbase)) &lt; 20:
          blob1Index = blob1Index+1
          base = nextbase
        else:
          if len(rightmost) &gt;= blob1Index+3:
            nextbase = rightmost[blob1Index+2].Contour.ToArray[Point]()[0]
            if abs(distfromlastframe(currbase, nextbase)) &lt; 20:
              blob1Index = blob1Index+2
              base = nextbase
            else: #keep previous value
              blob1Index = float.NaN
              base = base
          else:
            blob1Index = float.NaN
      else:
        blob1Index = float.NaN
      #return distfromlastframe(currbase, base)  
    blob1Index = float(blob1Index)
  else:
    # otherwise, return nan
    base = None
    blob1Index = float.NaN

  #return Tuple.Create(blob1Index,len(rightmost))

  Component = ConnectedComponentCollection(sortedRegions.ImageSize)
  # Order component list by rightmost centroid
  rightmost = list(Enumerable.OrderByDescending(sortedRegions, lambda x:x.Centroid.X))
  if Single.IsNaN(blob1Index) == False:
    Component.Add(rightmost[int(blob1Index)])
    if int(blob1Index)+1 &lt;= len(rightmost)-1:
      Component.Add(rightmost[int(blob1Index)+1])
    if int(blob1Index)+2 &lt;= len(rightmost)-1:
      Component.Add(rightmost[int(blob1Index)+2])
    
  #return Component

  if len(Component)&gt;=2:
    currCentroid = Component[1].Centroid
    if Single.IsNaN(centroidLoc.X) == True: 
      centroidLoc=currCentroid
    currCentroidVel = pointvelocity(centroidLoc,currCentroid)
    instantVel = -bisector(centroidLoc,currCentroid)
    if Single.IsNaN(centroidVel.X) == True: 
      centroidVel=currCentroidVel
    instantAcc = bisector(centroidVel,currCentroidVel)
    
    centroidLoc = currCentroid
    centroidVel = currCentroidVel
    return Tuple.Create(float(instantAcc),float(instantVel)) #calchypot(centroidLoc,currCentroid) #currCentroidVel #centroidAcc
  else:
    return Tuple.Create(float(0),float(0)) #Point(0,0) #

</q2:Script>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="q1:SortBinaryRegions" />
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="q1:BinaryRegionAnalysis" />
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="q1:FindContours">
                <q1:Mode>List</q1:Mode>
                <q1:Method>ChainApproxSimple</q1:Method>
                <q1:Offset>
                  <q1:X>0</q1:X>
                  <q1:Y>0</q1:Y>
                </q1:Offset>
                <q1:MinArea>400</q1:MinArea>
                <q1:MaxArea>10000</q1:MaxArea>
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="q1:BackgroundSubtraction">
                <q1:BackgroundFrames>0</q1:BackgroundFrames>
                <q1:AdaptationRate>0</q1:AdaptationRate>
                <q1:ThresholdValue>0</q1:ThresholdValue>
                <q1:ThresholdType>Binary</q1:ThresholdType>
                <q1:SubtractionMethod>Absolute</q1:SubtractionMethod>
              </Combinator>
            </Expression>
            <Expression xsi:type="WorkflowInput">
              <Name>Source1</Name>
            </Expression>
            <Expression xsi:type="WorkflowOutput" />
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="q1:MaskPolygon">
                <q1:Regions>
                  <q1:ArrayOfPoint>
                    <q1:Point>
                      <q1:X>220</q1:X>
                      <q1:Y>51</q1:Y>
                    </q1:Point>
                    <q1:Point>
                      <q1:X>220</q1:X>
                      <q1:Y>51</q1:Y>
                    </q1:Point>
                    <q1:Point>
                      <q1:X>220</q1:X>
                      <q1:Y>52</q1:Y>
                    </q1:Point>
                    <q1:Point>
                      <q1:X>220</q1:X>
                      <q1:Y>52</q1:Y>
                    </q1:Point>
                  </q1:ArrayOfPoint>
                  <q1:ArrayOfPoint>
                    <q1:Point>
                      <q1:X>416</q1:X>
                      <q1:Y>1</q1:Y>
                    </q1:Point>
                    <q1:Point>
                      <q1:X>282</q1:X>
                      <q1:Y>0</q1:Y>
                    </q1:Point>
                    <q1:Point>
                      <q1:X>129</q1:X>
                      <q1:Y>-1</q1:Y>
                    </q1:Point>
                    <q1:Point>
                      <q1:X>221</q1:X>
                      <q1:Y>11</q1:Y>
                    </q1:Point>
                    <q1:Point>
                      <q1:X>260</q1:X>
                      <q1:Y>52</q1:Y>
                    </q1:Point>
                    <q1:Point>
                      <q1:X>342</q1:X>
                      <q1:Y>69</q1:Y>
                    </q1:Point>
                    <q1:Point>
                      <q1:X>367</q1:X>
                      <q1:Y>94</q1:Y>
                    </q1:Point>
                    <q1:Point>
                      <q1:X>407</q1:X>
                      <q1:Y>119</q1:Y>
                    </q1:Point>
                    <q1:Point>
                      <q1:X>439</q1:X>
                      <q1:Y>144</q1:Y>
                    </q1:Point>
                    <q1:Point>
                      <q1:X>536</q1:X>
                      <q1:Y>166</q1:Y>
                    </q1:Point>
                    <q1:Point>
                      <q1:X>555</q1:X>
                      <q1:Y>215</q1:Y>
                    </q1:Point>
                    <q1:Point>
                      <q1:X>539</q1:X>
                      <q1:Y>455</q1:Y>
                    </q1:Point>
                    <q1:Point>
                      <q1:X>564</q1:X>
                      <q1:Y>455</q1:Y>
                    </q1:Point>
                    <q1:Point>
                      <q1:X>568</q1:X>
                      <q1:Y>-5</q1:Y>
                    </q1:Point>
                  </q1:ArrayOfPoint>
                </q1:Regions>
                <q1:MaskType>ToZeroInv</q1:MaskType>
                <q1:FillValue>
                  <q1:Val0>255</q1:Val0>
                  <q1:Val1>255</q1:Val1>
                  <q1:Val2>255</q1:Val2>
                  <q1:Val3>0</q1:Val3>
                </q1:FillValue>
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="q1:AdaptiveThreshold">
                <q1:MaxValue>255</q1:MaxValue>
                <q1:AdaptiveMethod>MeanC</q1:AdaptiveMethod>
                <q1:ThresholdType>Binary</q1:ThresholdType>
                <q1:BlockSize>25</q1:BlockSize>
                <q1:Parameter>3</q1:Parameter>
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="q1:Grayscale" />
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="q1:Crop">
                <q1:RegionOfInterest>
                  <q1:X>18</q1:X>
                  <q1:Y>6</q1:Y>
                  <q1:Width>564</q1:Width>
                  <q1:Height>456</q1:Height>
                </q1:RegionOfInterest>
              </Combinator>
            </Expression>
          </Nodes>
          <Edges>
            <Edge>
              <From>0</From>
              <To>6</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>1</From>
              <To>0</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>2</From>
              <To>1</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>3</From>
              <To>2</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>4</From>
              <To>3</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>5</From>
              <To>10</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>7</From>
              <To>4</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>8</From>
              <To>7</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>9</From>
              <To>8</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>10</From>
              <To>9</To>
              <Label>Source1</Label>
            </Edge>
          </Edges>
        </Workflow>
      </Expression>
      <Expression xsi:type="Condition">
        <Workflow>
          <Nodes>
            <Expression xsi:type="WorkflowInput">
              <Name>Source1</Name>
            </Expression>
            <Expression xsi:type="WorkflowOutput" />
          </Nodes>
          <Edges>
            <Edge>
              <From>0</From>
              <To>1</To>
              <Label>Source1</Label>
            </Edge>
          </Edges>
        </Workflow>
      </Expression>
      <Expression xsi:type="Condition">
        <Workflow>
          <Nodes>
            <Expression xsi:type="WorkflowInput">
              <Name>Source1</Name>
            </Expression>
            <Expression xsi:type="WorkflowOutput" />
          </Nodes>
          <Edges>
            <Edge>
              <From>0</From>
              <To>1</To>
              <Label>Source1</Label>
            </Edge>
          </Edges>
        </Workflow>
      </Expression>
      <Expression xsi:type="SelectMany">
        <Name>ProtractionAlignedSignal</Name>
        <Workflow>
          <Nodes>
            <Expression xsi:type="WorkflowInput">
              <Name>Source1</Name>
            </Expression>
            <Expression xsi:type="WorkflowOutput" />
          </Nodes>
          <Edges>
            <Edge>
              <From>0</From>
              <To>1</To>
              <Label>Source1</Label>
            </Edge>
          </Edges>
        </Workflow>
      </Expression>
      <Expression xsi:type="SelectMany">
        <Name>RetractionAlignedSignal</Name>
        <Workflow>
          <Nodes>
            <Expression xsi:type="WorkflowInput">
              <Name>Source1</Name>
            </Expression>
            <Expression xsi:type="WorkflowOutput" />
          </Nodes>
          <Edges>
            <Edge>
              <From>0</From>
              <To>1</To>
              <Label>Source1</Label>
            </Edge>
          </Edges>
        </Workflow>
      </Expression>
    </Nodes>
    <Edges>
      <Edge>
        <From>0</From>
        <To>12</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>1</From>
        <To>13</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>2</From>
        <To>14</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>3</From>
        <To>15</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>4</From>
        <To>3</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>5</From>
        <To>9</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>6</From>
        <To>16</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>7</From>
        <To>6</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>7</From>
        <To>11</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>8</From>
        <To>7</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>9</From>
        <To>4</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>11</From>
        <To>10</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>12</From>
        <To>1</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>12</From>
        <To>2</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>13</From>
        <To>3</To>
        <Label>Source2</Label>
      </Edge>
      <Edge>
        <From>13</From>
        <To>5</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>14</From>
        <To>8</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>14</From>
        <To>6</To>
        <Label>Source2</Label>
      </Edge>
      <Edge>
        <From>14</From>
        <To>11</To>
        <Label>Source2</Label>
      </Edge>
    </Edges>
  </Workflow>
  <ExtensionTypes>
    <Type>Bonsai.Vision.FileCapture, Bonsai.Vision, Version=2.4.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Scripting.PythonTransform, Bonsai.Scripting, Version=2.4.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Reactive.TriggeredWindow, Bonsai.Core, Version=2.4.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Dsp.Delay, Bonsai.Dsp, Version=2.4.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Dsp.FunctionGenerator, Bonsai.Dsp, Version=2.4.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Dsp.Buffer, Bonsai.Dsp, Version=2.4.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Dsp.Concat, Bonsai.Dsp, Version=2.4.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Reactive.TriggeredBuffer, Bonsai.Core, Version=2.4.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Vision.SortBinaryRegions, Bonsai.Vision, Version=2.4.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Vision.BinaryRegionAnalysis, Bonsai.Vision, Version=2.4.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Vision.FindContours, Bonsai.Vision, Version=2.4.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Vision.BackgroundSubtraction, Bonsai.Vision, Version=2.4.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Vision.MaskPolygon, Bonsai.Vision, Version=2.4.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Vision.AdaptiveThreshold, Bonsai.Vision, Version=2.4.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Vision.Grayscale, Bonsai.Vision, Version=2.4.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Vision.Crop, Bonsai.Vision, Version=2.4.0.0, Culture=neutral, PublicKeyToken=null</Type>
  </ExtensionTypes>
</WorkflowBuilder>