<?xml version="1.0" encoding="utf-8"?>
<WorkflowBuilder Version="2.4.0-preview">
  <Workflow xmlns:q2="clr-namespace:Bonsai.Dsp;assembly=Bonsai.Dsp" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:q3="clr-namespace:Bonsai.Audio;assembly=Bonsai.Audio" xmlns:q7="clr-namespace:Bonsai.IO;assembly=Bonsai.System" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:q5="clr-namespace:Bonsai.Windows.Input;assembly=Bonsai.Windows.Input" xmlns:q4="clr-namespace:Bonsai.Scripting;assembly=Bonsai.Scripting" xmlns:q6="clr-namespace:Bonsai.Vision;assembly=Bonsai.Vision" xmlns:q1="clr-namespace:Bonsai.Ephys;assembly=Bonsai.Ephys" xmlns="https://horizongir.org/bonsai">
    <Nodes>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="q1:Rhd2000EvalBoard">
          <q1:BitFileName>C:\OpenEphys\open-ephys-windows\rhd2000.bit</q1:BitFileName>
          <q1:SampleRate>SampleRate30000Hz</q1:SampleRate>
          <q1:FastSettle>false</q1:FastSettle>
          <q1:LowerBandwidth>0.1</q1:LowerBandwidth>
          <q1:UpperBandwidth>7500</q1:UpperBandwidth>
          <q1:DspCutoffFrequency>1</q1:DspCutoffFrequency>
          <q1:DspEnabled>true</q1:DspEnabled>
          <q1:CableDelayA xsi:nil="true" />
          <q1:CableDelayB xsi:nil="true" />
          <q1:CableDelayC xsi:nil="true" />
          <q1:CableDelayD xsi:nil="true" />
        </Combinator>
      </Expression>
      <Expression xsi:type="MemberSelector">
        <Selector>TtlIn</Selector>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="q2:DetectSpikes">
          <q2:Delay>20</q2:Delay>
          <q2:Length>60</q2:Length>
          <q2:Threshold>
            <q2:double>0.08054950873683589</q2:double>
          </q2:Threshold>
          <q2:WaveformRefinement>AlignPeaks</q2:WaveformRefinement>
        </Combinator>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="q2:TriggeredBuffer">
          <q2:Count>300</q2:Count>
        </Combinator>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="q2:Accumulate" />
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="q2:Threshold">
          <q2:ThresholdValue>0.5</q2:ThresholdValue>
          <q2:MaxValue>1</q2:MaxValue>
          <q2:ThresholdType>Binary</q2:ThresholdType>
        </Combinator>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="Zip" />
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="q3:AudioPlayback">
          <q3:DeviceName>Generic Software on Speakers (Realtek High Definition Audio)</q3:DeviceName>
          <q3:Frequency>30000</q3:Frequency>
        </Combinator>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="q2:ConvertScale">
          <q2:Depth>S32</q2:Depth>
          <q2:Scale>60000</q2:Scale>
          <q2:Shift>0</q2:Shift>
        </Combinator>
      </Expression>
      <Expression xsi:type="q4:PythonTransform">
        <q4:Name>OffCycleTrigger</q4:Name>
        <q4:Script>cycleOn = False

@returns(bool)
def process(value):
  global cycleOn

  if value.Item1&lt;-2 and value.Item2&gt;2:
    onCycleTrig = True
    offCycleTrig = False
  elif value.Item1&gt;2 and value.Item2&gt;2:
    onCycleTrig = False
    offCycleTrig = True
  else:
    onCycleTrig = False
    offCycleTrig = False

  if cycleOn == True:
    if offCycleTrig == False:
      cycleOn = True
      return False
    else:
      cycleOn = False
      return False

  if cycleOn == False:
    if onCycleTrig == True:
      cycleOn = True
      return True
    else:
      cycleOn = False
      return False</q4:Script>
      </Expression>
      <Expression xsi:type="q4:PythonTransform">
        <q4:Name>OnCycleTrigger</q4:Name>
        <q4:Script>cycleOn = False

@returns(bool)
def process(value):
  global cycleOn

  if value.Item1&gt;2 and value.Item2&gt;2:
    onCycleTrig = True
    offCycleTrig = False
  elif value.Item1&lt;-2 and value.Item2&gt;2:
    onCycleTrig = False
    offCycleTrig = True
  else:
    onCycleTrig = False
    offCycleTrig = False

  if cycleOn == True:
    if offCycleTrig == False:
      cycleOn = True
      return False
    else:
      cycleOn = False
      return False

  if cycleOn == False:
    if onCycleTrig == True:
      cycleOn = True
      return True
    else:
      cycleOn = False
      return False</q4:Script>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="CombineLatest" />
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="DoubleProperty">
          <Value>1</Value>
        </Combinator>
      </Expression>
      <Expression xsi:type="BitwiseAnd" />
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="SkipUntil" />
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="q5:KeyDown">
          <q5:Filter>Space</q5:Filter>
        </Combinator>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="TriggeredWindow">
          <Count>1</Count>
        </Combinator>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="TriggeredWindow">
          <Count>1</Count>
        </Combinator>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="q6:ImageWriter">
          <q6:Path>\\.\pipe\video</q6:Path>
          <q6:Suffix>None</q6:Suffix>
          <q6:Overwrite>false</q6:Overwrite>
        </Combinator>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="SkipUntil" />
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="q2:Concat">
          <q2:Axis>1</q2:Axis>
        </Combinator>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="TriggeredBuffer">
          <Count>100</Count>
        </Combinator>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="q2:Delay">
          <q2:Count>3000</q2:Count>
        </Combinator>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="q6:CameraCapture">
          <q6:Index>0</q6:Index>
          <q6:CaptureProperties />
        </Combinator>
      </Expression>
      <Expression xsi:type="NestedWorkflow">
        <Name>SignalProcessing</Name>
        <Description>FilteredAI1</Description>
        <Workflow>
          <Nodes>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="q2:FrequencyFilter">
                <q2:SamplingFrequency>30000</q2:SamplingFrequency>
                <q2:Cutoff1>300</q2:Cutoff1>
                <q2:Cutoff2>6000</q2:Cutoff2>
                <q2:KernelLength>60</q2:KernelLength>
                <q2:FilterType>BandPass</q2:FilterType>
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="q1:AdcScale">
                <q1:AdcType>BoardAdc</q1:AdcType>
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="q2:SelectChannels">
                <q2:Channels>
                  <q2:int>0</q2:int>
                </q2:Channels>
              </Combinator>
            </Expression>
            <Expression xsi:type="MemberSelector">
              <Selector>BoardAdcData</Selector>
            </Expression>
            <Expression xsi:type="WorkflowInput">
              <Name>Source1</Name>
            </Expression>
            <Expression xsi:type="WorkflowOutput" />
          </Nodes>
          <Edges>
            <Edge>
              <From>0</From>
              <To>5</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>1</From>
              <To>0</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>2</From>
              <To>1</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>3</From>
              <To>2</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>4</From>
              <To>3</To>
              <Label>Source1</Label>
            </Edge>
          </Edges>
        </Workflow>
      </Expression>
      <Expression xsi:type="NestedWorkflow">
        <Name>WhiskerTracking</Name>
        <Workflow>
          <Nodes>
            <Expression xsi:type="q4:PythonTransform">
              <q4:Script>import clr
clr.AddReference("System.Core")
clr.AddReference("OpenCV.Net")
clr.AddReference("Bonsai.Vision")
from System import Tuple, Math, Single, Array
import math
from System.Linq import Enumerable
from OpenCV.Net import Point, Point2f
from Bonsai.Vision import ConnectedComponentCollection

base = None
nanpoint = Point2f(float.NaN,float.NaN)
centroidLoc = nanpoint
centroidVel = nanpoint

def distfromlastframe(pt1,pt2):
  dx = (pt2.X - pt1.X)
  dy = (pt2.Y - pt1.Y)
  return dx + dy

def pointvelocity(pt1,pt2):
  dx = (pt2.X - pt1.X)
  dy = (pt2.Y - pt1.Y)
  return Point(dx,dy)

def bisector(pt1,pt2):
  dx = abs(pt2.X - pt1.X)
  dy = abs(pt2.Y - pt1.Y)
  if dx+dy !=0:
    #if abs(pt2.X) + abs(pt2.Y) &lt; 20:
    #  return 0
    #el
    if  pt2.X &lt;= 0:
      return (dx*dy)/math.hypot(dx, dy) #flipping polarity, as head oriented leftward
    else:
      return -(dx*dy)/math.hypot(dx, dy)
  else:
    return 0

@returns(Tuple[float,float]) #ConnectedComponentCollection) #@returns(Tuple[float,int]) #@returns(Single)
def process(sortedRegions):
  global base, centroidLoc, centroidVel
  # Order blob list by descending area
  #largest = list(Enumerable.OrderByDescending(sortedRegions, lambda x:x.Area))
  # Order component list by rightmost centroid
  rightmost = list(Enumerable.OrderByDescending(sortedRegions, lambda x:x.Centroid.X))

  if len(rightmost) &gt;= 1:
    blob1Index = 0
    currbase = base
    newbase = rightmost[blob1Index].Contour.ToArray[Point]()[0]
    if base is None:
      base = newbase
      #return float.NaN
    elif abs(distfromlastframe(currbase, newbase)) &lt; 20:
      base = newbase
      #float(largest[0].Orientation)
      #return distfromlastframe(currbase, base)
    else: # find which blob is which instead
      if len(rightmost) &gt;= blob1Index+2:
        nextbase = rightmost[blob1Index+1].Contour.ToArray[Point]()[0]
        if abs(distfromlastframe(currbase, nextbase)) &lt; 20:
          blob1Index = blob1Index+1
          base = nextbase
        else:
          if len(rightmost) &gt;= blob1Index+3:
            nextbase = rightmost[blob1Index+2].Contour.ToArray[Point]()[0]
            if abs(distfromlastframe(currbase, nextbase)) &lt; 20:
              blob1Index = blob1Index+2
              base = nextbase
            else: #keep previous value
              blob1Index = float.NaN
              base = base
          else:
            blob1Index = float.NaN
      else:
        blob1Index = float.NaN
      #return distfromlastframe(currbase, base)
    blob1Index = float(blob1Index)
  else:
    # otherwise, return nan
    base = None
    blob1Index = float.NaN

  #return Tuple.Create(blob1Index,len(rightmost))

  Component = ConnectedComponentCollection(sortedRegions.ImageSize)
  # Order component list by rightmost centroid
  rightmost = list(Enumerable.OrderByDescending(sortedRegions, lambda x:x.Centroid.X))
  if Single.IsNaN(blob1Index) == False:
    Component.Add(rightmost[int(blob1Index)])
    if int(blob1Index)+1 &lt;= len(rightmost)-1:
      Component.Add(rightmost[int(blob1Index)+1])
    if int(blob1Index)+2 &lt;= len(rightmost)-1:
      Component.Add(rightmost[int(blob1Index)+2])

  #return Component

  if len(Component)&gt;=2:
    currCentroid = Component[1].Centroid
    if Single.IsNaN(centroidLoc.X) == True:
      centroidLoc=currCentroid
    currCentroidVel = pointvelocity(centroidLoc,currCentroid)
    instantVel = -bisector(centroidLoc,currCentroid)
    if Single.IsNaN(centroidVel.X) == True:
      centroidVel=currCentroidVel
    instantAcc = bisector(centroidVel,currCentroidVel)

    centroidLoc = currCentroid
    centroidVel = currCentroidVel
    return Tuple.Create(float(instantAcc),float(instantVel)) #calchypot(centroidLoc,currCentroid) #currCentroidVel #centroidAcc
  else:
    return Tuple.Create(float(0),float(0)) #Point(0,0) #

</q4:Script>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="q6:SortBinaryRegions" />
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="q6:BinaryRegionAnalysis" />
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="q6:FindContours">
                <q6:Mode>List</q6:Mode>
                <q6:Method>ChainApproxSimple</q6:Method>
                <q6:Offset>
                  <q6:X>0</q6:X>
                  <q6:Y>0</q6:Y>
                </q6:Offset>
                <q6:MinArea>200</q6:MinArea>
                <q6:MaxArea>100000</q6:MaxArea>
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="q6:BackgroundSubtraction">
                <q6:BackgroundFrames>0</q6:BackgroundFrames>
                <q6:AdaptationRate>0</q6:AdaptationRate>
                <q6:ThresholdValue>6</q6:ThresholdValue>
                <q6:ThresholdType>Binary</q6:ThresholdType>
                <q6:SubtractionMethod>Absolute</q6:SubtractionMethod>
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="q6:AdaptiveThreshold">
                <q6:MaxValue>255</q6:MaxValue>
                <q6:AdaptiveMethod>MeanC</q6:AdaptiveMethod>
                <q6:ThresholdType>Binary</q6:ThresholdType>
                <q6:BlockSize>7</q6:BlockSize>
                <q6:Parameter>3</q6:Parameter>
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="q6:Grayscale" />
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="q6:Crop">
                <q6:RegionOfInterest>
                  <q6:X>6</q6:X>
                  <q6:Y>6</q6:Y>
                  <q6:Width>616</q6:Width>
                  <q6:Height>432</q6:Height>
                </q6:RegionOfInterest>
              </Combinator>
            </Expression>
            <Expression xsi:type="WorkflowInput">
              <Name>Source1</Name>
            </Expression>
            <Expression xsi:type="WorkflowOutput" />
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="q6:MaskPolygon">
                <q6:Regions>
                  <q6:ArrayOfPoint>
                    <q6:Point>
                      <q6:X>-53</q6:X>
                      <q6:Y>484</q6:Y>
                    </q6:Point>
                    <q6:Point>
                      <q6:X>-56</q6:X>
                      <q6:Y>385</q6:Y>
                    </q6:Point>
                    <q6:Point>
                      <q6:X>-47</q6:X>
                      <q6:Y>26</q6:Y>
                    </q6:Point>
                    <q6:Point>
                      <q6:X>308</q6:X>
                      <q6:Y>-49</q6:Y>
                    </q6:Point>
                    <q6:Point>
                      <q6:X>284</q6:X>
                      <q6:Y>43</q6:Y>
                    </q6:Point>
                    <q6:Point>
                      <q6:X>256</q6:X>
                      <q6:Y>93</q6:Y>
                    </q6:Point>
                    <q6:Point>
                      <q6:X>221</q6:X>
                      <q6:Y>153</q6:Y>
                    </q6:Point>
                    <q6:Point>
                      <q6:X>183</q6:X>
                      <q6:Y>211</q6:Y>
                    </q6:Point>
                    <q6:Point>
                      <q6:X>170</q6:X>
                      <q6:Y>249</q6:Y>
                    </q6:Point>
                    <q6:Point>
                      <q6:X>136</q6:X>
                      <q6:Y>283</q6:Y>
                    </q6:Point>
                    <q6:Point>
                      <q6:X>143</q6:X>
                      <q6:Y>342</q6:Y>
                    </q6:Point>
                    <q6:Point>
                      <q6:X>396</q6:X>
                      <q6:Y>475</q6:Y>
                    </q6:Point>
                  </q6:ArrayOfPoint>
                  <q6:ArrayOfPoint>
                    <q6:Point>
                      <q6:X>634</q6:X>
                      <q6:Y>-22</q6:Y>
                    </q6:Point>
                    <q6:Point>
                      <q6:X>285</q6:X>
                      <q6:Y>-3</q6:Y>
                    </q6:Point>
                    <q6:Point>
                      <q6:X>413</q6:X>
                      <q6:Y>25</q6:Y>
                    </q6:Point>
                    <q6:Point>
                      <q6:X>607</q6:X>
                      <q6:Y>50</q6:Y>
                    </q6:Point>
                    <q6:Point>
                      <q6:X>616</q6:X>
                      <q6:Y>173</q6:Y>
                    </q6:Point>
                    <q6:Point>
                      <q6:X>606</q6:X>
                      <q6:Y>308</q6:Y>
                    </q6:Point>
                    <q6:Point>
                      <q6:X>576</q6:X>
                      <q6:Y>383</q6:Y>
                    </q6:Point>
                    <q6:Point>
                      <q6:X>524</q6:X>
                      <q6:Y>454</q6:Y>
                    </q6:Point>
                    <q6:Point>
                      <q6:X>676</q6:X>
                      <q6:Y>455</q6:Y>
                    </q6:Point>
                  </q6:ArrayOfPoint>
                </q6:Regions>
                <q6:MaskType>ToZeroInv</q6:MaskType>
                <q6:FillValue>
                  <q6:Val0>255</q6:Val0>
                  <q6:Val1>255</q6:Val1>
                  <q6:Val2>255</q6:Val2>
                  <q6:Val3>0</q6:Val3>
                </q6:FillValue>
              </Combinator>
            </Expression>
          </Nodes>
          <Edges>
            <Edge>
              <From>0</From>
              <To>9</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>1</From>
              <To>0</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>2</From>
              <To>1</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>3</From>
              <To>2</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>4</From>
              <To>3</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>5</From>
              <To>10</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>6</From>
              <To>5</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>7</From>
              <To>6</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>8</From>
              <To>7</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>10</From>
              <To>4</To>
              <Label>Source1</Label>
            </Edge>
          </Edges>
        </Workflow>
      </Expression>
      <Expression xsi:type="SelectMany">
        <Name>ProtractionAlignedSignal</Name>
        <Workflow>
          <Nodes>
            <Expression xsi:type="WorkflowInput">
              <Name>Source1</Name>
            </Expression>
            <Expression xsi:type="WorkflowOutput" />
          </Nodes>
          <Edges>
            <Edge>
              <From>0</From>
              <To>1</To>
              <Label>Source1</Label>
            </Edge>
          </Edges>
        </Workflow>
      </Expression>
      <Expression xsi:type="NestedWorkflow">
        <Name>Save Ephys and Video</Name>
        <Workflow>
          <Nodes>
            <Expression xsi:type="q7:CsvWriter">
              <q7:FileName>C:\Data\vIRt26\vIRt26_0205\vIRt26_0205_4850_20190205-201818_HSCam.csv</q7:FileName>
              <q7:Append>false</q7:Append>
              <q7:Overwrite>false</q7:Overwrite>
              <q7:Suffix>None</q7:Suffix>
              <q7:IncludeHeader>false</q7:IncludeHeader>
              <q7:Selector>Timestamp</q7:Selector>
              <q7:CompatibilityMode>true</q7:CompatibilityMode>
            </Expression>
            <Expression xsi:type="q4:PythonTransform">
              <q4:Name>ffmpeg call</q4:Name>
              <q4:Script>import os

#fname = 'D:\\Data\\Video\\video.avi'
pipename = r'\\.\pipe\video'

@returns(bool)
def process(value):
  fname=value.Item2;
  os.system(str.format(r'ffmpeg -y -f rawvideo -vcodec rawvideo -s 640x480 -r 500 -pix_fmt rgb24 -i {0} -c:v h264_nvenc -preset fast -b:v 20M {1}',pipename,fname))
  return True</q4:Script>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="q2:MatrixWriter">
                <q2:Path>C:\Data\vIRt26\vIRt26_0205\vIRt26_0205_4850_20190205-201818_AIN1.bin</q2:Path>
                <q2:Suffix>None</q2:Suffix>
                <q2:Overwrite>false</q2:Overwrite>
                <q2:Layout>ColumnMajor</q2:Layout>
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="q2:MatrixWriter">
                <q2:Path>C:\Data\vIRt26\vIRt26_0205\vIRt26_0205_4850_20190205-201818_TTL.bin</q2:Path>
                <q2:Suffix>None</q2:Suffix>
                <q2:Overwrite>false</q2:Overwrite>
                <q2:Layout>ColumnMajor</q2:Layout>
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="Timestamp" />
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="Zip" />
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="SkipUntil" />
            </Expression>
            <Expression xsi:type="q4:PythonTransform">
              <q4:Name>csv filename</q4:Name>
              <q4:Script>import clr
#clr.AddReference("Bonsai.System")
#from System.IO import Path
#from Bonsai.IO import PathHelper, PathSuffix
from datetime import datetime

def getOutputType():
    return clr.GetClrType(str)

def process(value):
  timestamp = datetime.now().strftime("%Y%m%d-%H%M%S")
#  path = Path.Combine(Path.GetDirectoryName(value.Item1), Path.GetFileNameWithoutExtension(value.Item2)) + timestamp + ".csv"
  path = value.Item2 + value.Item1 + "_" + timestamp + "_HSCam.csv"
  return path
</q4:Script>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="Timer">
                <DueTime>PT1S</DueTime>
                <Period>PT0S</Period>
              </Combinator>
            </Expression>
            <Expression xsi:type="q4:PythonTransform">
              <q4:Name>avi filename</q4:Name>
              <q4:Description>avi filename</q4:Description>
              <q4:Script>import clr
#clr.AddReference("Bonsai.System")
#from System.IO import Path
#from Bonsai.IO import PathHelper, PathSuffix
from datetime import datetime

def getOutputType():
    return clr.GetClrType(str)

def process(value):
  timestamp = datetime.now().strftime("%Y%m%d-%H%M%S")
#  path = Path.Combine(Path.GetDirectoryName(value.Item1), Path.GetFileNameWithoutExtension(value.Item2)) + timestamp + ".csv"
  path = value.Item2 + value.Item1 + "_" + timestamp + "_HSCam.avi"
  return path
</q4:Script>
            </Expression>
            <Expression xsi:type="q4:PythonTransform">
              <q4:Name>ADC binary filename</q4:Name>
              <q4:Script>import clr
#clr.AddReference("Bonsai.System")
#from System.IO import Path
#from Bonsai.IO import PathHelper, PathSuffix
from datetime import datetime

def getOutputType():
    return clr.GetClrType(str)

def process(value):
  timestamp = datetime.now().strftime("%Y%m%d-%H%M%S")
#  path = Path.Combine(Path.GetDirectoryName(value.Item1), Path.GetFileNameWithoutExtension(value.Item2)) + timestamp + ".csv"
  path = value.Item2 + value.Item1 + "_" + timestamp + "_AIN1.bin"
  return path
</q4:Script>
            </Expression>
            <Expression xsi:type="q4:PythonTransform">
              <q4:Name>TTL binary filename</q4:Name>
              <q4:Script>import clr
#clr.AddReference("Bonsai.System")
#from System.IO import Path
#from Bonsai.IO import PathHelper, PathSuffix
from datetime import datetime

def getOutputType():
    return clr.GetClrType(str)

def process(value):
  timestamp = datetime.now().strftime("%Y%m%d-%H%M%S")
#  path = Path.Combine(Path.GetDirectoryName(value.Item1), Path.GetFileNameWithoutExtension(value.Item2)) + timestamp + ".csv"
  path = value.Item2 + value.Item1 + "_" + timestamp + "_TTL.bin"
  return path
</q4:Script>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="Repeat" />
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="Repeat" />
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="Repeat" />
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="Repeat" />
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="Zip" />
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="Zip" />
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="Zip" />
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="Zip" />
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="StringProperty">
                <Value>vIRt26_0205_4850</Value>
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="StringProperty">
                <Value>C:\Data\vIRt26\vIRt26_0205\</Value>
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="StringProperty">
                <Value>vIRt26_0205_4850</Value>
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="StringProperty">
                <Value>C:\Data\vIRt26\vIRt26_0205\</Value>
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="StringProperty">
                <Value>vIRt26_0205_4850</Value>
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="StringProperty">
                <Value>C:\Data\vIRt26\vIRt26_0205\</Value>
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="StringProperty">
                <Value>vIRt26_0205_4850</Value>
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="StringProperty">
                <Value>C:\Data\vIRt26\vIRt26_0205\</Value>
              </Combinator>
            </Expression>
            <Expression xsi:type="WorkflowInput">
              <Name>Source1</Name>
            </Expression>
            <Expression xsi:type="WorkflowInput">
              <Name>Source2</Name>
            </Expression>
            <Expression xsi:type="WorkflowInput">
              <Name>Source3</Name>
            </Expression>
            <Expression xsi:type="WorkflowInput">
              <Name>Source4</Name>
            </Expression>
            <Expression xsi:type="ExternalizedProperty">
              <MemberName>FileName</MemberName>
              <Name>HScam csv filename</Name>
            </Expression>
            <Expression xsi:type="ExternalizedProperty">
              <MemberName>Path</MemberName>
              <Name>ADCrec filename</Name>
            </Expression>
            <Expression xsi:type="ExternalizedProperty">
              <MemberName>Path</MemberName>
              <Name>TTL filename</Name>
            </Expression>
            <Expression xsi:type="ExternalizedProperty">
              <MemberName>Value</MemberName>
              <Name>XP name</Name>
            </Expression>
            <Expression xsi:type="ExternalizedProperty">
              <MemberName>Value</MemberName>
              <Name>Directory</Name>
            </Expression>
          </Nodes>
          <Edges>
            <Edge>
              <From>4</From>
              <To>0</To>
              <Label>Source2</Label>
            </Edge>
            <Edge>
              <From>5</From>
              <To>1</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>6</From>
              <To>2</To>
              <Label>Source2</Label>
            </Edge>
            <Edge>
              <From>7</From>
              <To>32</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>8</From>
              <To>5</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>9</From>
              <To>5</To>
              <Label>Source2</Label>
            </Edge>
            <Edge>
              <From>10</From>
              <To>33</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>11</From>
              <To>34</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>12</From>
              <To>7</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>13</From>
              <To>9</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>14</From>
              <To>10</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>15</From>
              <To>11</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>16</From>
              <To>12</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>17</From>
              <To>13</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>18</From>
              <To>14</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>19</From>
              <To>15</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>20</From>
              <To>16</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>21</From>
              <To>16</To>
              <Label>Source2</Label>
            </Edge>
            <Edge>
              <From>22</From>
              <To>17</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>23</From>
              <To>17</To>
              <Label>Source2</Label>
            </Edge>
            <Edge>
              <From>24</From>
              <To>18</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>25</From>
              <To>18</To>
              <Label>Source2</Label>
            </Edge>
            <Edge>
              <From>26</From>
              <To>19</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>27</From>
              <To>19</To>
              <Label>Source2</Label>
            </Edge>
            <Edge>
              <From>28</From>
              <To>6</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>29</From>
              <To>6</To>
              <Label>Source2</Label>
            </Edge>
            <Edge>
              <From>30</From>
              <To>4</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>31</From>
              <To>3</To>
              <Label>Source2</Label>
            </Edge>
            <Edge>
              <From>32</From>
              <To>0</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>33</From>
              <To>2</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>34</From>
              <To>3</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>35</From>
              <To>20</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>35</From>
              <To>22</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>35</From>
              <To>24</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>35</From>
              <To>26</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>36</From>
              <To>21</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>36</From>
              <To>23</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>36</From>
              <To>25</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>36</From>
              <To>27</To>
              <Label>Source1</Label>
            </Edge>
          </Edges>
        </Workflow>
      </Expression>
      <Expression xsi:type="SelectMany">
        <Name>RetractionAlignedSignal</Name>
        <Workflow>
          <Nodes>
            <Expression xsi:type="WorkflowInput">
              <Name>Source1</Name>
            </Expression>
            <Expression xsi:type="WorkflowOutput" />
          </Nodes>
          <Edges>
            <Edge>
              <From>0</From>
              <To>1</To>
              <Label>Source1</Label>
            </Edge>
          </Edges>
        </Workflow>
      </Expression>
      <Expression xsi:type="Condition">
        <Workflow>
          <Nodes>
            <Expression xsi:type="WorkflowInput">
              <Name>Source1</Name>
            </Expression>
            <Expression xsi:type="WorkflowOutput" />
          </Nodes>
          <Edges>
            <Edge>
              <From>0</From>
              <To>1</To>
              <Label>Source1</Label>
            </Edge>
          </Edges>
        </Workflow>
      </Expression>
      <Expression xsi:type="Condition">
        <Workflow>
          <Nodes>
            <Expression xsi:type="WorkflowInput">
              <Name>Source1</Name>
            </Expression>
            <Expression xsi:type="WorkflowOutput" />
          </Nodes>
          <Edges>
            <Edge>
              <From>0</From>
              <To>1</To>
              <Label>Source1</Label>
            </Edge>
          </Edges>
        </Workflow>
      </Expression>
      <Expression xsi:type="GroupWorkflow">
        <Name>200msBufferAligned100ms</Name>
        <Workflow>
          <Nodes>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="q2:Delay">
                <q2:Count>3000</q2:Count>
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="q2:Buffer">
                <q2:Count>6000</q2:Count>
                <q2:Skip xsi:nil="true" />
              </Combinator>
            </Expression>
            <Expression xsi:type="WorkflowInput">
              <Name>Source1</Name>
            </Expression>
            <Expression xsi:type="WorkflowOutput" />
          </Nodes>
          <Edges>
            <Edge>
              <From>0</From>
              <To>1</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>1</From>
              <To>3</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>2</From>
              <To>0</To>
              <Label>Source1</Label>
            </Edge>
          </Edges>
        </Workflow>
      </Expression>
    </Nodes>
    <Edges>
      <Edge>
        <From>0</From>
        <To>1</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>0</From>
        <To>24</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>1</From>
        <To>11</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>1</From>
        <To>19</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>3</From>
        <To>4</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>5</From>
        <To>6</To>
        <Label>Source2</Label>
      </Edge>
      <Edge>
        <From>6</From>
        <To>3</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>8</From>
        <To>7</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>9</From>
        <To>29</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>10</From>
        <To>30</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>11</From>
        <To>13</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>12</From>
        <To>11</To>
        <Label>Source2</Label>
      </Edge>
      <Edge>
        <From>13</From>
        <To>5</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>14</From>
        <To>18</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>14</From>
        <To>27</To>
        <Label>Source3</Label>
      </Edge>
      <Edge>
        <From>15</From>
        <To>14</To>
        <Label>Source2</Label>
      </Edge>
      <Edge>
        <From>15</From>
        <To>19</To>
        <Label>Source2</Label>
      </Edge>
      <Edge>
        <From>15</From>
        <To>27</To>
        <Label>Source2</Label>
      </Edge>
      <Edge>
        <From>16</From>
        <To>26</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>17</From>
        <To>28</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>19</From>
        <To>27</To>
        <Label>Source4</Label>
      </Edge>
      <Edge>
        <From>21</From>
        <To>20</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>22</From>
        <To>21</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>23</From>
        <To>14</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>23</From>
        <To>25</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>24</From>
        <To>2</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>24</From>
        <To>8</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>24</From>
        <To>27</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>24</From>
        <To>31</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>24</From>
        <To>6</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>24</From>
        <To>22</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>25</From>
        <To>10</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>25</From>
        <To>9</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>29</From>
        <To>17</To>
        <Label>Source2</Label>
      </Edge>
      <Edge>
        <From>29</From>
        <To>21</To>
        <Label>Source2</Label>
      </Edge>
      <Edge>
        <From>30</From>
        <To>16</To>
        <Label>Source2</Label>
      </Edge>
      <Edge>
        <From>31</From>
        <To>16</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>31</From>
        <To>17</To>
        <Label>Source1</Label>
      </Edge>
    </Edges>
  </Workflow>
  <ExtensionTypes>
    <Type>Bonsai.Ephys.Rhd2000EvalBoard, Bonsai.Ephys, Version=2.4.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Dsp.DetectSpikes, Bonsai.Dsp, Version=2.4.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Dsp.TriggeredBuffer, Bonsai.Dsp, Version=2.4.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Dsp.Accumulate, Bonsai.Dsp, Version=2.4.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Dsp.Threshold, Bonsai.Dsp, Version=2.4.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Reactive.Zip, Bonsai.Core, Version=2.4.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Audio.AudioPlayback, Bonsai.Audio, Version=2.4.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Dsp.ConvertScale, Bonsai.Dsp, Version=2.4.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Scripting.PythonTransform, Bonsai.Scripting, Version=2.4.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Reactive.CombineLatest, Bonsai.Core, Version=2.4.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Expressions.DoubleProperty, Bonsai.Core, Version=2.4.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Expressions.BitwiseAndBuilder, Bonsai.Core, Version=2.4.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Reactive.SkipUntil, Bonsai.Core, Version=2.4.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Windows.Input.KeyDown, Bonsai.Windows.Input, Version=2.2.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Reactive.TriggeredWindow, Bonsai.Core, Version=2.4.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Vision.ImageWriter, Bonsai.Vision, Version=2.4.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Dsp.Concat, Bonsai.Dsp, Version=2.4.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Reactive.TriggeredBuffer, Bonsai.Core, Version=2.4.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Dsp.Delay, Bonsai.Dsp, Version=2.4.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Vision.CameraCapture, Bonsai.Vision, Version=2.4.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Dsp.FrequencyFilter, Bonsai.Dsp, Version=2.4.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Ephys.AdcScale, Bonsai.Ephys, Version=2.4.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Dsp.SelectChannels, Bonsai.Dsp, Version=2.4.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Vision.SortBinaryRegions, Bonsai.Vision, Version=2.4.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Vision.BinaryRegionAnalysis, Bonsai.Vision, Version=2.4.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Vision.FindContours, Bonsai.Vision, Version=2.4.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Vision.BackgroundSubtraction, Bonsai.Vision, Version=2.4.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Vision.AdaptiveThreshold, Bonsai.Vision, Version=2.4.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Vision.Grayscale, Bonsai.Vision, Version=2.4.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Vision.Crop, Bonsai.Vision, Version=2.4.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Vision.MaskPolygon, Bonsai.Vision, Version=2.4.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.IO.CsvWriter, Bonsai.System, Version=2.4.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Dsp.MatrixWriter, Bonsai.Dsp, Version=2.4.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Reactive.Timestamp, Bonsai.Core, Version=2.4.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Reactive.Timer, Bonsai.Core, Version=2.4.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Reactive.Repeat, Bonsai.Core, Version=2.4.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Expressions.StringProperty, Bonsai.Core, Version=2.4.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Dsp.Buffer, Bonsai.Dsp, Version=2.4.0.0, Culture=neutral, PublicKeyToken=null</Type>
  </ExtensionTypes>
</WorkflowBuilder>