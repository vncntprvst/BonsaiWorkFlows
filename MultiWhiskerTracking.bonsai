<?xml version="1.0" encoding="utf-8"?>
<WorkflowBuilder Version="2.3.0">
  <Workflow xmlns:q1="clr-namespace:Bonsai.IO;assembly=Bonsai.System" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:q2="clr-namespace:Bonsai.Vision;assembly=Bonsai.Vision" xmlns:q3="clr-namespace:Bonsai.Scripting;assembly=Bonsai.Scripting" xmlns="https://horizongir.org/bonsai">
    <Nodes>
      <Expression xsi:type="q1:CsvWriter">
        <q1:FileName>MainWhiskerAngle.csv</q1:FileName>
        <q1:Append>false</q1:Append>
        <q1:Overwrite>false</q1:Overwrite>
        <q1:Suffix>None</q1:Suffix>
        <q1:IncludeHeader>false</q1:IncludeHeader>
        <q1:Selector />
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="q2:FindContours">
          <q2:Mode>List</q2:Mode>
          <q2:Method>ChainApproxSimple</q2:Method>
          <q2:Offset>
            <q2:X>0</q2:X>
            <q2:Y>0</q2:Y>
          </q2:Offset>
          <q2:MinArea>150</q2:MinArea>
          <q2:MaxArea>10000</q2:MaxArea>
        </Combinator>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="q2:Crop">
          <q2:RegionOfInterest>
            <q2:X>158</q2:X>
            <q2:Y>4</q2:Y>
            <q2:Width>290</q2:Width>
            <q2:Height>318</q2:Height>
          </q2:RegionOfInterest>
        </Combinator>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="q2:Grayscale" />
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="q2:FileCapture">
          <q2:FileName>D:\Vincent\vIRt7\vIRt7_Acute_HSCam2017-12-21T23_56_49.avi</q2:FileName>
          <q2:PlaybackRate>500</q2:PlaybackRate>
          <q2:StartPosition>0</q2:StartPosition>
          <q2:PositionUnits>Frames</q2:PositionUnits>
          <q2:Loop>false</q2:Loop>
          <q2:Playing>true</q2:Playing>
        </Combinator>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="q2:MaskPolygon">
          <q2:Regions>
            <q2:ArrayOfPoint>
              <q2:Point>
                <q2:X>194</q2:X>
                <q2:Y>4</q2:Y>
              </q2:Point>
              <q2:Point>
                <q2:X>294</q2:X>
                <q2:Y>31</q2:Y>
              </q2:Point>
              <q2:Point>
                <q2:X>297</q2:X>
                <q2:Y>-7</q2:Y>
              </q2:Point>
              <q2:Point>
                <q2:X>230</q2:X>
                <q2:Y>-5</q2:Y>
              </q2:Point>
            </q2:ArrayOfPoint>
            <q2:ArrayOfPoint>
              <q2:Point>
                <q2:X>220</q2:X>
                <q2:Y>51</q2:Y>
              </q2:Point>
              <q2:Point>
                <q2:X>220</q2:X>
                <q2:Y>51</q2:Y>
              </q2:Point>
              <q2:Point>
                <q2:X>220</q2:X>
                <q2:Y>52</q2:Y>
              </q2:Point>
              <q2:Point>
                <q2:X>220</q2:X>
                <q2:Y>52</q2:Y>
              </q2:Point>
            </q2:ArrayOfPoint>
          </q2:Regions>
          <q2:MaskType>ToZeroInv</q2:MaskType>
          <q2:FillValue>
            <q2:Val0>255</q2:Val0>
            <q2:Val1>255</q2:Val1>
            <q2:Val2>255</q2:Val2>
            <q2:Val3>0</q2:Val3>
          </q2:FillValue>
        </Combinator>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="q2:AdaptiveThreshold">
          <q2:MaxValue>255</q2:MaxValue>
          <q2:AdaptiveMethod>MeanC</q2:AdaptiveMethod>
          <q2:ThresholdType>Binary</q2:ThresholdType>
          <q2:BlockSize>7</q2:BlockSize>
          <q2:Parameter>3</q2:Parameter>
        </Combinator>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="q2:BackgroundSubtraction">
          <q2:BackgroundFrames>0</q2:BackgroundFrames>
          <q2:AdaptationRate>0</q2:AdaptationRate>
          <q2:ThresholdValue>0</q2:ThresholdValue>
          <q2:ThresholdType>Binary</q2:ThresholdType>
          <q2:SubtractionMethod>Absolute</q2:SubtractionMethod>
        </Combinator>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="q2:DrawConnectedComponents" />
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="q2:SortBinaryRegions" />
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="q2:SortBinaryRegions" />
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="q2:BinaryRegionAnalysis" />
      </Expression>
      <Expression xsi:type="q1:CsvWriter">
        <q1:FileName>MultiWhiskerAngleCentroid.csv</q1:FileName>
        <q1:Append>false</q1:Append>
        <q1:Overwrite>false</q1:Overwrite>
        <q1:Suffix>None</q1:Suffix>
        <q1:IncludeHeader>false</q1:IncludeHeader>
        <q1:Selector />
      </Expression>
      <Expression xsi:type="q3:PythonTransform">
        <q3:Script>import clr
clr.AddReference("System.Core")
from System.Linq import Enumerable

@returns(float)
def process(value):
  # Order blob list by descending area
  #largest = list(Enumerable.OrderByDescending(value, lambda x:x.Area))

  # Order blob list by leftmost centroid
  leftmost = list(Enumerable.OrderBy(value, lambda x:x.Centroid.X))

  if len(leftmost) &gt;= 1:
    return float(leftmost[0].Orientation)
  #elif len(largest) &gt;= 2:
  #  a1 = largest[0].Orientation
  #  a2 = largest[1].Orientation
  #  return (a1+a2)/2
  #elif len(largest) &gt;= 2:
  #  a1 = largest[0].Orientation
  #  a2 = largest[1].Orientation
  #  a3 = largest[2].Orientation
  #  return (a1+a2+a3)/3
  else:
    # otherwise, return nan
    return float.NaN</q3:Script>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="q2:BinaryRegionAnalysis" />
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="q2:FindContours">
          <q2:Mode>List</q2:Mode>
          <q2:Method>ChainApproxSimple</q2:Method>
          <q2:Offset>
            <q2:X>0</q2:X>
            <q2:Y>0</q2:Y>
          </q2:Offset>
          <q2:MinArea>500</q2:MinArea>
          <q2:MaxArea>10000</q2:MaxArea>
        </Combinator>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="q2:BackgroundSubtraction">
          <q2:BackgroundFrames>0</q2:BackgroundFrames>
          <q2:AdaptationRate>0</q2:AdaptationRate>
          <q2:ThresholdValue>0</q2:ThresholdValue>
          <q2:ThresholdType>Binary</q2:ThresholdType>
          <q2:SubtractionMethod>Absolute</q2:SubtractionMethod>
        </Combinator>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="q2:MaskPolygon">
          <q2:Regions>
            <q2:ArrayOfPoint>
              <q2:Point>
                <q2:X>194</q2:X>
                <q2:Y>4</q2:Y>
              </q2:Point>
              <q2:Point>
                <q2:X>294</q2:X>
                <q2:Y>31</q2:Y>
              </q2:Point>
              <q2:Point>
                <q2:X>297</q2:X>
                <q2:Y>-7</q2:Y>
              </q2:Point>
              <q2:Point>
                <q2:X>230</q2:X>
                <q2:Y>-5</q2:Y>
              </q2:Point>
            </q2:ArrayOfPoint>
            <q2:ArrayOfPoint>
              <q2:Point>
                <q2:X>220</q2:X>
                <q2:Y>51</q2:Y>
              </q2:Point>
              <q2:Point>
                <q2:X>220</q2:X>
                <q2:Y>51</q2:Y>
              </q2:Point>
              <q2:Point>
                <q2:X>220</q2:X>
                <q2:Y>52</q2:Y>
              </q2:Point>
              <q2:Point>
                <q2:X>220</q2:X>
                <q2:Y>52</q2:Y>
              </q2:Point>
            </q2:ArrayOfPoint>
          </q2:Regions>
          <q2:MaskType>ToZeroInv</q2:MaskType>
          <q2:FillValue>
            <q2:Val0>255</q2:Val0>
            <q2:Val1>255</q2:Val1>
            <q2:Val2>255</q2:Val2>
            <q2:Val3>0</q2:Val3>
          </q2:FillValue>
        </Combinator>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="q2:AdaptiveThreshold">
          <q2:MaxValue>255</q2:MaxValue>
          <q2:AdaptiveMethod>MeanC</q2:AdaptiveMethod>
          <q2:ThresholdType>Binary</q2:ThresholdType>
          <q2:BlockSize>7</q2:BlockSize>
          <q2:Parameter>3</q2:Parameter>
        </Combinator>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="q2:Grayscale" />
      </Expression>
      <Expression xsi:type="NestedWorkflow">
        <Workflow>
          <Nodes>
            <Expression xsi:type="q3:PythonTransform">
              <q3:Script>import clr
clr.AddReference("Bonsai.Vision")
clr.AddReference("System.Core")
from Bonsai.Vision import ConnectedComponentCollection
from System.Linq import Enumerable
from System import Tuple

@returns(Tuple[float,float,float])
def process(value):
  # Component = ConnectedComponentCollection(value.ImageSize)
  # Order component list by leftmost centroid
  leftmost = list(Enumerable.OrderBy(value, lambda x:x.Centroid.X))
  if len(leftmost) &gt;= 1:  
        return Tuple.Create(leftmost[0].Orientation,float(leftmost[0].Centroid.X),float(leftmost[0].Centroid.Y))
  else:
    # otherwise, return nan
    return Tuple.Create(float.NaN,float.NaN,float.NaN)

    
  
</q3:Script>
            </Expression>
            <Expression xsi:type="WorkflowInput">
              <Name>Source1</Name>
            </Expression>
            <Expression xsi:type="WorkflowOutput" />
            <Expression xsi:type="q3:PythonTransform">
              <q3:Script>import clr
clr.AddReference("Bonsai.Vision")
clr.AddReference("System.Core")
from Bonsai.Vision import ConnectedComponentCollection
from System.Linq import Enumerable
from System import Tuple

@returns(Tuple[float,float,float])
def process(value):
  # Component = ConnectedComponentCollection(value.ImageSize)
  # Order component list by leftmost centroid
  leftmost = list(Enumerable.OrderBy(value, lambda x:x.Centroid.X))
  if len(leftmost) &gt;= 2:  
        return Tuple.Create(leftmost[1].Orientation,float(leftmost[1].Centroid.X),float(leftmost[1].Centroid.Y))
  else:
    # otherwise, return nan
    return Tuple.Create(float.NaN,float.NaN,float.NaN)

    
  
</q3:Script>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="Zip" />
            </Expression>
            <Expression xsi:type="q3:PythonTransform">
              <q3:Script>import clr
clr.AddReference("Bonsai.Vision")
clr.AddReference("System.Core")
from Bonsai.Vision import ConnectedComponentCollection
from System.Linq import Enumerable
from System import Tuple

@returns(Tuple[float,float,float])
def process(value):
  # Component = ConnectedComponentCollection(value.ImageSize)
  # Order component list by leftmost centroid
  leftmost = list(Enumerable.OrderBy(value, lambda x:x.Centroid.X))
  if len(leftmost) &gt;= 3:  
        return Tuple.Create(leftmost[2].Orientation,float(leftmost[2].Centroid.X),float(leftmost[2].Centroid.Y))
  else:
    # otherwise, return nan
    return Tuple.Create(float.NaN,float.NaN,float.NaN)

    
  
</q3:Script>
            </Expression>
            <Expression xsi:type="q3:PythonTransform">
              <q3:Script>import clr
clr.AddReference("Bonsai.Vision")
clr.AddReference("System.Core")
from Bonsai.Vision import ConnectedComponentCollection
from System.Linq import Enumerable
from System import Tuple

@returns(Tuple[float,float,float])
def process(value):
  # Component = ConnectedComponentCollection(value.ImageSize)
  # Order component list by leftmost centroid
  leftmost = list(Enumerable.OrderBy(value, lambda x:x.Centroid.X))
  if len(leftmost) &gt;= 4:  
    return Tuple.Create(leftmost[3].Orientation,float(leftmost[3].Centroid.X),float(leftmost[3].Centroid.Y))
  else:
    # otherwise, return nan
    return Tuple.Create(float.NaN,float.NaN,float.NaN)

    
  
</q3:Script>
            </Expression>
            <Expression xsi:type="q3:PythonTransform">
              <q3:Script>import clr
clr.AddReference("Bonsai.Vision")
clr.AddReference("System.Core")
from Bonsai.Vision import ConnectedComponentCollection
from System.Linq import Enumerable
from System import Tuple

@returns(Tuple[float,float,float])
def process(value):
  # Component = ConnectedComponentCollection(value.ImageSize)
  # Order component list by leftmost centroid
  leftmost = list(Enumerable.OrderBy(value, lambda x:x.Centroid.X))
  if len(leftmost) &gt;= 5:  
    return Tuple.Create(leftmost[4].Orientation,float(leftmost[4].Centroid.X),float(leftmost[4].Centroid.Y))
  else:
    # otherwise, return nan
    return Tuple.Create(float.NaN,float.NaN,float.NaN)

    
  
</q3:Script>
            </Expression>
          </Nodes>
          <Edges>
            <Edge>
              <From>0</From>
              <To>4</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>1</From>
              <To>0</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>1</From>
              <To>3</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>1</From>
              <To>5</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>1</From>
              <To>6</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>1</From>
              <To>7</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>3</From>
              <To>4</To>
              <Label>Source2</Label>
            </Edge>
            <Edge>
              <From>4</From>
              <To>2</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>5</From>
              <To>4</To>
              <Label>Source3</Label>
            </Edge>
            <Edge>
              <From>6</From>
              <To>4</To>
              <Label>Source4</Label>
            </Edge>
            <Edge>
              <From>7</From>
              <To>4</To>
              <Label>Source5</Label>
            </Edge>
          </Edges>
        </Workflow>
      </Expression>
    </Nodes>
    <Edges>
      <Edge>
        <From>1</From>
        <To>11</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>2</From>
        <To>3</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>2</From>
        <To>19</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>3</From>
        <To>6</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>4</From>
        <To>2</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>5</From>
        <To>7</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>6</From>
        <To>5</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>7</From>
        <To>1</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>9</From>
        <To>13</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>10</From>
        <To>8</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>10</From>
        <To>20</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>11</From>
        <To>10</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>13</From>
        <To>0</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>14</From>
        <To>9</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>15</From>
        <To>14</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>16</From>
        <To>15</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>17</From>
        <To>16</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>18</From>
        <To>17</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>19</From>
        <To>18</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>20</From>
        <To>12</To>
        <Label>Source1</Label>
      </Edge>
    </Edges>
  </Workflow>
  <ExtensionTypes>
    <Type>Bonsai.IO.CsvWriter, Bonsai.System, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Vision.FindContours, Bonsai.Vision, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Vision.Crop, Bonsai.Vision, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Vision.Grayscale, Bonsai.Vision, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Vision.FileCapture, Bonsai.Vision, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Vision.MaskPolygon, Bonsai.Vision, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Vision.AdaptiveThreshold, Bonsai.Vision, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Vision.BackgroundSubtraction, Bonsai.Vision, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Vision.DrawConnectedComponents, Bonsai.Vision, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Vision.SortBinaryRegions, Bonsai.Vision, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Vision.BinaryRegionAnalysis, Bonsai.Vision, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Scripting.PythonTransform, Bonsai.Scripting, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Reactive.Zip, Bonsai.Core, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
  </ExtensionTypes>
</WorkflowBuilder>