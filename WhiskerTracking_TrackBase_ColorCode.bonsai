<?xml version="1.0" encoding="utf-8"?>
<WorkflowBuilder Version="2.3.0">
  <Workflow xmlns:q1="clr-namespace:Bonsai.Vision;assembly=Bonsai.Vision" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:q2="clr-namespace:Bonsai.Scripting;assembly=Bonsai.Scripting" xmlns="https://horizongir.org/bonsai">
    <Nodes>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="q1:Crop">
          <q1:RegionOfInterest>
            <q1:X>0</q1:X>
            <q1:Y>82</q1:Y>
            <q1:Width>630</q1:Width>
            <q1:Height>388</q1:Height>
          </q1:RegionOfInterest>
        </Combinator>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="q1:FileCapture">
          <q1:FileName>D:\Data\Ephys\vIRt21\vIRt21_1005\vIRt21_1005_4500_multi_5ms10Hz10mW.mp4</q1:FileName>
          <q1:PlaybackRate>500</q1:PlaybackRate>
          <q1:StartPosition>150000</q1:StartPosition>
          <q1:PositionUnits>Frames</q1:PositionUnits>
          <q1:Loop>false</q1:Loop>
          <q1:Playing>true</q1:Playing>
        </Combinator>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="q1:DrawConnectedComponents" />
      </Expression>
      <Expression xsi:type="NestedWorkflow">
        <Workflow>
          <Nodes>
            <Expression xsi:type="q2:PythonTransform">
              <q2:Script>import clr
clr.AddReference("Bonsai.Vision")
clr.AddReference("System.Core")
from Bonsai.Vision import ConnectedComponentCollection
from System import Tuple,  Single
from System.Linq import Enumerable

@returns(ConnectedComponentCollection)
def process(value):
  baseIndex= value.Item1
  sortedRegions = value.Item2
  Component = ConnectedComponentCollection(sortedRegions.ImageSize)
  # Order component list by rightmost centroid
  rightmost = list(Enumerable.OrderByDescending(sortedRegions, lambda x:x.Centroid.X))
  #if len(rightmost) &gt;= 1:
  if Single.IsNaN(baseIndex.Item1) == False:
    Component.Add(rightmost[int(baseIndex.Item1)])
    
  return Component
</q2:Script>
            </Expression>
            <Expression xsi:type="WorkflowInput">
              <Name>Source1</Name>
            </Expression>
            <Expression xsi:type="WorkflowOutput" />
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="q1:Mask">
                <q1:FillValue>
                  <q1:Val0>0</q1:Val0>
                  <q1:Val1>0</q1:Val1>
                  <q1:Val2>0</q1:Val2>
                  <q1:Val3>0</q1:Val3>
                </q1:FillValue>
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="Zip" />
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="q1:SolidColor">
                <q1:Size>
                  <q1:Width>630</q1:Width>
                  <q1:Height>388</q1:Height>
                </q1:Size>
                <q1:Depth>U8</q1:Depth>
                <q1:Channels>3</q1:Channels>
                <q1:Color>
                  <q1:Val0>0</q1:Val0>
                  <q1:Val1>234</q1:Val1>
                  <q1:Val2>0</q1:Val2>
                  <q1:Val3>0</q1:Val3>
                </q1:Color>
              </Combinator>
            </Expression>
            <Expression xsi:type="InputMapping">
              <PropertyMappings>
                <Property name="Size" selector="Source.Size" />
              </PropertyMappings>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="q1:DrawConnectedComponents" />
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="CombineLatest" />
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="q1:Mask">
                <q1:FillValue>
                  <q1:Val0>0</q1:Val0>
                  <q1:Val1>0</q1:Val1>
                  <q1:Val2>0</q1:Val2>
                  <q1:Val3>0</q1:Val3>
                </q1:FillValue>
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="Zip" />
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="q1:SolidColor">
                <q1:Size>
                  <q1:Width>630</q1:Width>
                  <q1:Height>388</q1:Height>
                </q1:Size>
                <q1:Depth>U8</q1:Depth>
                <q1:Channels>3</q1:Channels>
                <q1:Color>
                  <q1:Val0>0</q1:Val0>
                  <q1:Val1>207</q1:Val1>
                  <q1:Val2>234</q1:Val2>
                  <q1:Val3>0</q1:Val3>
                </q1:Color>
              </Combinator>
            </Expression>
            <Expression xsi:type="InputMapping">
              <PropertyMappings>
                <Property name="Size" selector="Source.Size" />
              </PropertyMappings>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="q1:DrawConnectedComponents" />
            </Expression>
            <Expression xsi:type="q2:PythonTransform">
              <q2:Script>import clr
clr.AddReference("Bonsai.Vision")
clr.AddReference("System.Core")
from Bonsai.Vision import ConnectedComponentCollection
from System import Tuple,  Single
from System.Linq import Enumerable

@returns(ConnectedComponentCollection)
def process(value):
  baseIndex= value.Item1
  sortedRegions = value.Item2
  Component = ConnectedComponentCollection(sortedRegions.ImageSize)
  # Order component list by rightmost centroid
  rightmost = list(Enumerable.OrderByDescending(sortedRegions, lambda x:x.Centroid.X))
  #if len(rightmost) &gt;= 1:
  if Single.IsNaN(baseIndex.Item1) == False and int(baseIndex.Item1)+1 &lt;= baseIndex.Item2:
    Component.Add(rightmost[int(baseIndex.Item1)+1])
    
  return Component
</q2:Script>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="q1:Mask">
                <q1:FillValue>
                  <q1:Val0>0</q1:Val0>
                  <q1:Val1>0</q1:Val1>
                  <q1:Val2>0</q1:Val2>
                  <q1:Val3>0</q1:Val3>
                </q1:FillValue>
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="Zip" />
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="q1:SolidColor">
                <q1:Size>
                  <q1:Width>630</q1:Width>
                  <q1:Height>388</q1:Height>
                </q1:Size>
                <q1:Depth>U8</q1:Depth>
                <q1:Channels>3</q1:Channels>
                <q1:Color>
                  <q1:Val0>255</q1:Val0>
                  <q1:Val1>0</q1:Val1>
                  <q1:Val2>0</q1:Val2>
                  <q1:Val3>0</q1:Val3>
                </q1:Color>
              </Combinator>
            </Expression>
            <Expression xsi:type="InputMapping">
              <PropertyMappings>
                <Property name="Size" selector="Source.Size" />
              </PropertyMappings>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="q1:DrawConnectedComponents" />
            </Expression>
            <Expression xsi:type="q2:PythonTransform">
              <q2:Script>import clr
clr.AddReference("Bonsai.Vision")
clr.AddReference("System.Core")
from Bonsai.Vision import ConnectedComponentCollection
from System import Tuple,  Single
from System.Linq import Enumerable

@returns(ConnectedComponentCollection)
def process(value):
  baseIndex= value.Item1
  sortedRegions = value.Item2
  Component = ConnectedComponentCollection(sortedRegions.ImageSize)
  # Order component list by rightmost centroid
  rightmost = list(Enumerable.OrderByDescending(sortedRegions, lambda x:x.Centroid.X))
  #if len(rightmost) &gt;= 1:
  if Single.IsNaN(baseIndex.Item1) == False and int(baseIndex.Item1)+2 &lt;= baseIndex.Item2:
    Component.Add(rightmost[int(baseIndex.Item1)+2])
    
  return Component
</q2:Script>
            </Expression>
            <Expression xsi:type="Add" />
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="q1:Mask">
                <q1:FillValue>
                  <q1:Val0>0</q1:Val0>
                  <q1:Val1>0</q1:Val1>
                  <q1:Val2>0</q1:Val2>
                  <q1:Val3>0</q1:Val3>
                </q1:FillValue>
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="Zip" />
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="q1:SolidColor">
                <q1:Size>
                  <q1:Width>630</q1:Width>
                  <q1:Height>388</q1:Height>
                </q1:Size>
                <q1:Depth>U8</q1:Depth>
                <q1:Channels>3</q1:Channels>
                <q1:Color>
                  <q1:Val0>87.5</q1:Val0>
                  <q1:Val1>145</q1:Val1>
                  <q1:Val2>145</q1:Val2>
                  <q1:Val3>0</q1:Val3>
                </q1:Color>
              </Combinator>
            </Expression>
            <Expression xsi:type="InputMapping">
              <PropertyMappings>
                <Property name="Size" selector="Source.Size" />
              </PropertyMappings>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="q1:DrawConnectedComponents" />
            </Expression>
            <Expression xsi:type="q2:PythonTransform">
              <q2:Script>import clr
clr.AddReference("Bonsai.Vision")
clr.AddReference("System.Core")
from Bonsai.Vision import ConnectedComponentCollection
from System import Tuple,  Single
from System.Linq import Enumerable

@returns(ConnectedComponentCollection)
def process(value):
  baseIndex= value.Item1
  sortedRegions = value.Item2
  Component = ConnectedComponentCollection(sortedRegions.ImageSize)
  # Order component list by rightmost centroid
  rightmost = list(Enumerable.OrderByDescending(sortedRegions, lambda x:x.Centroid.X))
  #if len(rightmost) &gt;= 1:
  if Single.IsNaN(baseIndex.Item1) == False and int(baseIndex.Item1)+3 &lt;= len(rightmost): #baseIndex.Item2:
    Component.Add(rightmost[int(baseIndex.Item1)+3])
  #else:
    #Component.Add(rightmost[int(baseIndex.Item1)])
  return Component
</q2:Script>
            </Expression>
          </Nodes>
          <Edges>
            <Edge>
              <From>0</From>
              <To>7</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>1</From>
              <To>0</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>1</From>
              <To>14</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>1</From>
              <To>20</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>1</From>
              <To>27</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>3</From>
              <To>8</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>4</From>
              <To>3</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>5</From>
              <To>4</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>6</From>
              <To>5</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>7</From>
              <To>6</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>7</From>
              <To>4</To>
              <Label>Source2</Label>
            </Edge>
            <Edge>
              <From>8</From>
              <To>21</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>9</From>
              <To>8</To>
              <Label>Source2</Label>
            </Edge>
            <Edge>
              <From>10</From>
              <To>9</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>11</From>
              <To>10</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>12</From>
              <To>11</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>13</From>
              <To>12</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>13</From>
              <To>10</To>
              <Label>Source2</Label>
            </Edge>
            <Edge>
              <From>14</From>
              <To>13</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>15</From>
              <To>8</To>
              <Label>Source3</Label>
            </Edge>
            <Edge>
              <From>16</From>
              <To>15</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>17</From>
              <To>16</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>18</From>
              <To>17</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>19</From>
              <To>18</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>19</From>
              <To>16</To>
              <Label>Source2</Label>
            </Edge>
            <Edge>
              <From>20</From>
              <To>19</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>21</From>
              <To>2</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>22</From>
              <To>8</To>
              <Label>Source4</Label>
            </Edge>
            <Edge>
              <From>23</From>
              <To>22</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>24</From>
              <To>23</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>25</From>
              <To>24</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>26</From>
              <To>25</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>26</From>
              <To>23</To>
              <Label>Source2</Label>
            </Edge>
            <Edge>
              <From>27</From>
              <To>26</To>
              <Label>Source1</Label>
            </Edge>
          </Edges>
        </Workflow>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="q1:SortBinaryRegions" />
      </Expression>
      <Expression xsi:type="q2:PythonTransform">
        <q2:Script>import clr
clr.AddReference("System.Core")
clr.AddReference("OpenCV.Net")
from System import Tuple, Math, Single, Array
from System.Linq import Enumerable
from OpenCV.Net import Point, Point2f

base = None
#tip = None

def distfromlastframe(pt1,pt2):
  dx = (pt2.X - pt1.X)
  dy = (pt2.Y - pt1.Y)
  return dx + dy

@returns(Tuple[float,int]) #@returns(Single)
def process(value):
  global base
  # Order blob list by descending area
  #largest = list(Enumerable.OrderByDescending(value, lambda x:x.Area))
  # Order component list by rightmost centroid
  rightmost = list(Enumerable.OrderByDescending(value, lambda x:x.Centroid.X))

  if len(rightmost) &gt;= 1:
    blob1Index = 0
    currbase = base
    newbase = max(rightmost[blob1Index].Contour.ToArray[Point]())
    if base is None:
      base = newbase
      #return float.NaN
    elif abs(distfromlastframe(currbase, newbase)) &lt; 20:
      base = newbase
      #float(largest[0].Orientation)
      #return distfromlastframe(currbase, base)  
    else: # find which blob is which instead
      if len(rightmost) &gt;= blob1Index+2:
        nextbase = max(rightmost[blob1Index+1].Contour.ToArray[Point]())
        if abs(distfromlastframe(currbase, nextbase)) &lt; 20:
          blob1Index = blob1Index+1
          base = nextbase
        else:
          if len(rightmost) &gt;= blob1Index+3:
            nextbase = max(rightmost[blob1Index+2].Contour.ToArray[Point]())
            if abs(distfromlastframe(currbase, nextbase)) &lt; 20:
              blob1Index = blob1Index+2
              base = nextbase
            else: #keep previous value
              blob1Index = float.NaN
              base = base
          else:
            blob1Index = float.NaN
      else:
        blob1Index = float.NaN
      #return distfromlastframe(currbase, base)  
    blob1Index = float(blob1Index)
  else:
    # otherwise, return nan
    base = None
    blob1Index = float.NaN

  return Tuple.Create(blob1Index,len(rightmost))</q2:Script>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="q1:BinaryRegionAnalysis" />
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="q1:FindContours">
          <q1:Mode>List</q1:Mode>
          <q1:Method>ChainApproxSimple</q1:Method>
          <q1:Offset>
            <q1:X>0</q1:X>
            <q1:Y>0</q1:Y>
          </q1:Offset>
          <q1:MinArea>400</q1:MinArea>
          <q1:MaxArea>10000</q1:MaxArea>
        </Combinator>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="q1:BackgroundSubtraction">
          <q1:BackgroundFrames>0</q1:BackgroundFrames>
          <q1:AdaptationRate>0</q1:AdaptationRate>
          <q1:ThresholdValue>0</q1:ThresholdValue>
          <q1:ThresholdType>Binary</q1:ThresholdType>
          <q1:SubtractionMethod>Absolute</q1:SubtractionMethod>
        </Combinator>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="q1:MaskPolygon">
          <q1:Regions>
            <q1:ArrayOfPoint>
              <q1:Point>
                <q1:X>220</q1:X>
                <q1:Y>51</q1:Y>
              </q1:Point>
              <q1:Point>
                <q1:X>220</q1:X>
                <q1:Y>51</q1:Y>
              </q1:Point>
              <q1:Point>
                <q1:X>220</q1:X>
                <q1:Y>52</q1:Y>
              </q1:Point>
              <q1:Point>
                <q1:X>220</q1:X>
                <q1:Y>52</q1:Y>
              </q1:Point>
            </q1:ArrayOfPoint>
            <q1:ArrayOfPoint>
              <q1:Point>
                <q1:X>627</q1:X>
                <q1:Y>-1</q1:Y>
              </q1:Point>
              <q1:Point>
                <q1:X>559</q1:X>
                <q1:Y>-1</q1:Y>
              </q1:Point>
              <q1:Point>
                <q1:X>421</q1:X>
                <q1:Y>0</q1:Y>
              </q1:Point>
              <q1:Point>
                <q1:X>283</q1:X>
                <q1:Y>0</q1:Y>
              </q1:Point>
              <q1:Point>
                <q1:X>301</q1:X>
                <q1:Y>4</q1:Y>
              </q1:Point>
              <q1:Point>
                <q1:X>314</q1:X>
                <q1:Y>14</q1:Y>
              </q1:Point>
              <q1:Point>
                <q1:X>372</q1:X>
                <q1:Y>16</q1:Y>
              </q1:Point>
              <q1:Point>
                <q1:X>396</q1:X>
                <q1:Y>33</q1:Y>
              </q1:Point>
              <q1:Point>
                <q1:X>425</q1:X>
                <q1:Y>60</q1:Y>
              </q1:Point>
              <q1:Point>
                <q1:X>516</q1:X>
                <q1:Y>92</q1:Y>
              </q1:Point>
              <q1:Point>
                <q1:X>535</q1:X>
                <q1:Y>127</q1:Y>
              </q1:Point>
              <q1:Point>
                <q1:X>609</q1:X>
                <q1:Y>185</q1:Y>
              </q1:Point>
              <q1:Point>
                <q1:X>582</q1:X>
                <q1:Y>261</q1:Y>
              </q1:Point>
              <q1:Point>
                <q1:X>588</q1:X>
                <q1:Y>344</q1:Y>
              </q1:Point>
              <q1:Point>
                <q1:X>577</q1:X>
                <q1:Y>375</q1:Y>
              </q1:Point>
              <q1:Point>
                <q1:X>626</q1:X>
                <q1:Y>382</q1:Y>
              </q1:Point>
            </q1:ArrayOfPoint>
          </q1:Regions>
          <q1:MaskType>ToZeroInv</q1:MaskType>
          <q1:FillValue>
            <q1:Val0>255</q1:Val0>
            <q1:Val1>255</q1:Val1>
            <q1:Val2>255</q1:Val2>
            <q1:Val3>0</q1:Val3>
          </q1:FillValue>
        </Combinator>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="q1:AdaptiveThreshold">
          <q1:MaxValue>255</q1:MaxValue>
          <q1:AdaptiveMethod>MeanC</q1:AdaptiveMethod>
          <q1:ThresholdType>Binary</q1:ThresholdType>
          <q1:BlockSize>25</q1:BlockSize>
          <q1:Parameter>3</q1:Parameter>
        </Combinator>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="q1:Grayscale" />
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="Zip" />
      </Expression>
    </Nodes>
    <Edges>
      <Edge>
        <From>0</From>
        <To>11</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>1</From>
        <To>0</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>4</From>
        <To>5</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>4</From>
        <To>2</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>4</From>
        <To>12</To>
        <Label>Source2</Label>
      </Edge>
      <Edge>
        <From>5</From>
        <To>12</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>6</From>
        <To>4</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>7</From>
        <To>6</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>8</From>
        <To>7</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>9</From>
        <To>8</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>10</From>
        <To>9</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>11</From>
        <To>10</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>12</From>
        <To>3</To>
        <Label>Source1</Label>
      </Edge>
    </Edges>
  </Workflow>
  <ExtensionTypes>
    <Type>Bonsai.Vision.Crop, Bonsai.Vision, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Vision.FileCapture, Bonsai.Vision, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Vision.DrawConnectedComponents, Bonsai.Vision, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Scripting.PythonTransform, Bonsai.Scripting, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Vision.Mask, Bonsai.Vision, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Reactive.Zip, Bonsai.Core, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Vision.SolidColor, Bonsai.Vision, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Expressions.InputMappingBuilder, Bonsai.Core, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Reactive.CombineLatest, Bonsai.Core, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Expressions.AddBuilder, Bonsai.Core, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Vision.SortBinaryRegions, Bonsai.Vision, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Vision.BinaryRegionAnalysis, Bonsai.Vision, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Vision.FindContours, Bonsai.Vision, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Vision.BackgroundSubtraction, Bonsai.Vision, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Vision.MaskPolygon, Bonsai.Vision, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Vision.AdaptiveThreshold, Bonsai.Vision, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Vision.Grayscale, Bonsai.Vision, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
  </ExtensionTypes>
</WorkflowBuilder>