<?xml version="1.0" encoding="utf-8"?>
<WorkflowBuilder Version="2.3.0">
  <Workflow xmlns:q1="clr-namespace:Bonsai.Vision;assembly=Bonsai.Vision" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:q2="clr-namespace:Bonsai.Scripting;assembly=Bonsai.Scripting" xmlns:q3="clr-namespace:Bonsai.IO;assembly=Bonsai.System" xmlns="https://horizongir.org/bonsai">
    <Nodes>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="q1:Crop">
          <q1:RegionOfInterest>
            <q1:X>0</q1:X>
            <q1:Y>82</q1:Y>
            <q1:Width>630</q1:Width>
            <q1:Height>388</q1:Height>
          </q1:RegionOfInterest>
        </Combinator>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="q1:FileCapture">
          <q1:FileName>Z:\VMSharedFolder %\Vincent\vIRt24\vIRt24_0110_3751_2ms10Hz5mW.mp4</q1:FileName>
          <q1:PlaybackRate>50000</q1:PlaybackRate>
          <q1:StartPosition>0</q1:StartPosition>
          <q1:PositionUnits>Frames</q1:PositionUnits>
          <q1:Loop>false</q1:Loop>
          <q1:Playing>true</q1:Playing>
        </Combinator>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="q1:SortBinaryRegions" />
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="q1:BinaryRegionAnalysis" />
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="q1:FindContours">
          <q1:Mode>List</q1:Mode>
          <q1:Method>ChainApproxSimple</q1:Method>
          <q1:Offset>
            <q1:X>0</q1:X>
            <q1:Y>0</q1:Y>
          </q1:Offset>
          <q1:MinArea>400</q1:MinArea>
          <q1:MaxArea>10000</q1:MaxArea>
        </Combinator>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="q1:BackgroundSubtraction">
          <q1:BackgroundFrames>0</q1:BackgroundFrames>
          <q1:AdaptationRate>0</q1:AdaptationRate>
          <q1:ThresholdValue>0</q1:ThresholdValue>
          <q1:ThresholdType>Binary</q1:ThresholdType>
          <q1:SubtractionMethod>Absolute</q1:SubtractionMethod>
        </Combinator>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="q1:MaskPolygon">
          <q1:Regions>
            <q1:ArrayOfPoint>
              <q1:Point>
                <q1:X>220</q1:X>
                <q1:Y>51</q1:Y>
              </q1:Point>
              <q1:Point>
                <q1:X>220</q1:X>
                <q1:Y>51</q1:Y>
              </q1:Point>
              <q1:Point>
                <q1:X>220</q1:X>
                <q1:Y>52</q1:Y>
              </q1:Point>
              <q1:Point>
                <q1:X>220</q1:X>
                <q1:Y>52</q1:Y>
              </q1:Point>
            </q1:ArrayOfPoint>
            <q1:ArrayOfPoint>
              <q1:Point>
                <q1:X>629</q1:X>
                <q1:Y>-1</q1:Y>
              </q1:Point>
              <q1:Point>
                <q1:X>559</q1:X>
                <q1:Y>-1</q1:Y>
              </q1:Point>
              <q1:Point>
                <q1:X>421</q1:X>
                <q1:Y>0</q1:Y>
              </q1:Point>
              <q1:Point>
                <q1:X>283</q1:X>
                <q1:Y>0</q1:Y>
              </q1:Point>
              <q1:Point>
                <q1:X>198</q1:X>
                <q1:Y>-1</q1:Y>
              </q1:Point>
              <q1:Point>
                <q1:X>218</q1:X>
                <q1:Y>24</q1:Y>
              </q1:Point>
              <q1:Point>
                <q1:X>270</q1:X>
                <q1:Y>53</q1:Y>
              </q1:Point>
              <q1:Point>
                <q1:X>310</q1:X>
                <q1:Y>59</q1:Y>
              </q1:Point>
              <q1:Point>
                <q1:X>378</q1:X>
                <q1:Y>96</q1:Y>
              </q1:Point>
              <q1:Point>
                <q1:X>482</q1:X>
                <q1:Y>138</q1:Y>
              </q1:Point>
              <q1:Point>
                <q1:X>508</q1:X>
                <q1:Y>159</q1:Y>
              </q1:Point>
              <q1:Point>
                <q1:X>514</q1:X>
                <q1:Y>211</q1:Y>
              </q1:Point>
              <q1:Point>
                <q1:X>519</q1:X>
                <q1:Y>278</q1:Y>
              </q1:Point>
              <q1:Point>
                <q1:X>542</q1:X>
                <q1:Y>346</q1:Y>
              </q1:Point>
              <q1:Point>
                <q1:X>566</q1:X>
                <q1:Y>390</q1:Y>
              </q1:Point>
              <q1:Point>
                <q1:X>629</q1:X>
                <q1:Y>398</q1:Y>
              </q1:Point>
            </q1:ArrayOfPoint>
          </q1:Regions>
          <q1:MaskType>ToZeroInv</q1:MaskType>
          <q1:FillValue>
            <q1:Val0>255</q1:Val0>
            <q1:Val1>255</q1:Val1>
            <q1:Val2>255</q1:Val2>
            <q1:Val3>0</q1:Val3>
          </q1:FillValue>
        </Combinator>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="q1:AdaptiveThreshold">
          <q1:MaxValue>255</q1:MaxValue>
          <q1:AdaptiveMethod>MeanC</q1:AdaptiveMethod>
          <q1:ThresholdType>Binary</q1:ThresholdType>
          <q1:BlockSize>25</q1:BlockSize>
          <q1:Parameter>3</q1:Parameter>
        </Combinator>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="q1:Grayscale" />
      </Expression>
      <Expression xsi:type="q2:PythonTransform">
        <q2:Script>import clr
clr.AddReference("System.Core")
clr.AddReference("OpenCV.Net")
clr.AddReference("Bonsai.Vision")
from System import Tuple, Math, Single, Array
import math
from System.Linq import Enumerable
from OpenCV.Net import Point, Point2f
from Bonsai.Vision import ConnectedComponentCollection

base = None
nanpoint = Point2f(float.NaN,float.NaN)
centroidLoc = nanpoint
centroidVel = nanpoint

def distfromlastframe(pt1,pt2):
  dx = (pt2.X - pt1.X)
  dy = (pt2.Y - pt1.Y)
  return dx + dy

def pointvelocity(pt1,pt2):
  dx = (pt2.X - pt1.X)
  dy = (pt2.Y - pt1.Y)
  return Point(dx,dy)

def bisector(pt1,pt2):
  dx = abs(pt2.X - pt1.X)
  dy = abs(pt2.Y - pt1.Y)
  if dx+dy !=0:
    #if abs(pt2.X) + abs(pt2.Y) &lt; 20:
    #  return 0
    #el
    if  pt2.X &lt;= 0:
      return (dx*dy)/math.hypot(dx, dy) #flipping polarity, as head oriented leftward
    else:
      return -(dx*dy)/math.hypot(dx, dy)
  else:
    return 0

@returns(ConnectedComponentCollection) #(Tuple[float,float]) #ConnectedComponentCollection) #@returns(Tuple[float,int]) #@returns(Single)
def process(sortedRegions):
  global base, centroidLoc, centroidVel
  # Order blob list by descending area
  #largest = list(Enumerable.OrderByDescending(sortedRegions, lambda x:x.Area))
  # Order component list by rightmost centroid
  #rightmost = list(Enumerable.OrderByDescending(sortedRegions, lambda x:x.Centroid.X))
  leftmost = list(Enumerable.OrderBy(sortedRegions, lambda x:x.Centroid.X))

  if len(leftmost) &gt;= 1:
    blob1Index = 0
    currbase = base
    newbase = leftmost[blob1Index].Contour.ToArray[Point]()[0]
    if base is None:
      base = newbase
      #return float.NaN
    elif abs(distfromlastframe(currbase, newbase)) &lt; 20:
      base = newbase
      #float(largest[0].Orientation)
      #return distfromlastframe(currbase, base)  
    else: # find which blob is which instead
      if len(leftmost) &gt;= blob1Index+2:
        nextbase = leftmost[blob1Index+1].Contour.ToArray[Point]()[0]
        if abs(distfromlastframe(currbase, nextbase)) &lt; 20:
          blob1Index = blob1Index+1
          base = nextbase
        else:
          if len(leftmost) &gt;= blob1Index+3:
            nextbase = leftmost[blob1Index+2].Contour.ToArray[Point]()[0]
            if abs(distfromlastframe(currbase, nextbase)) &lt; 20:
              blob1Index = blob1Index+2
              base = nextbase
            else: #keep previous value
              blob1Index = float.NaN
              base = base
          else:
            blob1Index = float.NaN
      else:
        blob1Index = float.NaN
      #return distfromlastframe(currbase, base)  
    blob1Index = float(blob1Index)
  else:
    # otherwise, return nan
    base = None
    blob1Index = float.NaN

  #return Tuple.Create(blob1Index,len(leftmost))

  Component = ConnectedComponentCollection(sortedRegions.ImageSize)
  # Order component list by leftmost centroid
  leftmost = list(Enumerable.OrderBy(sortedRegions, lambda x:x.Centroid.X))
  if Single.IsNaN(blob1Index) == False:
    #Component.Add(leftmost[int(blob1Index)])
    if int(blob1Index)+1 &lt;= len(leftmost)-1:
      Component.Add(leftmost[int(blob1Index)+1])
    #if int(blob1Index)+2 &lt;= len(leftmost)-1:
      #Component.Add(leftmost[int(blob1Index)+2])
    
  return Component

  # if len(Component)&gt;=2:
  #   currCentroid = Component[1].Centroid
  #   if Single.IsNaN(centroidLoc.X) == True: 
  #     centroidLoc=currCentroid
  #   currCentroidVel = pointvelocity(centroidLoc,currCentroid)
  #   instantVel = -bisector(centroidLoc,currCentroid)
  #   if Single.IsNaN(centroidVel.X) == True: 
  #     centroidVel=currCentroidVel
  #   instantAcc = bisector(centroidVel,currCentroidVel)
    
  #   centroidLoc = currCentroid
  #   centroidVel = currCentroidVel
  #   return Tuple.Create(float(instantAcc),float(instantVel)) #calchypot(centroidLoc,currCentroid) #currCentroidVel #centroidAcc
  # else:
  #   return Tuple.Create(float(0),float(0)) #Point(0,0) #

</q2:Script>
      </Expression>
      <Expression xsi:type="q3:CsvWriter">
        <q3:FileName>Z:\VMSharedFolder %\Vincent\vIRt24\WhiskersCentroidOrientation_vIRt24_0110_3751_2ms10Hz5mW.csv</q3:FileName>
        <q3:Append>false</q3:Append>
        <q3:Overwrite>false</q3:Overwrite>
        <q3:Suffix>None</q3:Suffix>
        <q3:IncludeHeader>false</q3:IncludeHeader>
        <q3:Selector>Source.Centroid,Source.Orientation</q3:Selector>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="q1:LargestBinaryRegion" />
      </Expression>
    </Nodes>
    <Edges>
      <Edge>
        <From>0</From>
        <To>8</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>1</From>
        <To>0</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>2</From>
        <To>9</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>3</From>
        <To>2</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>4</From>
        <To>3</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>5</From>
        <To>4</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>6</From>
        <To>5</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>7</From>
        <To>6</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>8</From>
        <To>7</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>9</From>
        <To>11</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>11</From>
        <To>10</To>
        <Label>Source1</Label>
      </Edge>
    </Edges>
  </Workflow>
  <ExtensionTypes>
    <Type>Bonsai.Vision.Crop, Bonsai.Vision, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Vision.FileCapture, Bonsai.Vision, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Vision.SortBinaryRegions, Bonsai.Vision, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Vision.BinaryRegionAnalysis, Bonsai.Vision, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Vision.FindContours, Bonsai.Vision, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Vision.BackgroundSubtraction, Bonsai.Vision, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Vision.MaskPolygon, Bonsai.Vision, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Vision.AdaptiveThreshold, Bonsai.Vision, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Vision.Grayscale, Bonsai.Vision, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Scripting.PythonTransform, Bonsai.Scripting, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.IO.CsvWriter, Bonsai.System, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Vision.LargestBinaryRegion, Bonsai.Vision, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
  </ExtensionTypes>
</WorkflowBuilder>